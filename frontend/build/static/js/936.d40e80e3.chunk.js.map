{"version":3,"file":"static/js/936.d40e80e3.chunk.js","mappings":"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","sources":["common/AdminComponent.js","components/Online/MeditationON/PreviewCard.js","components/Online/MeditationON/MeditationONImageListItem.js","components/Online/MeditationON/MeditationONModal.js","api/meditationon.js","pages/Online/MeditationON/MeditationON.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\n\r\nconst AdminComponent = (props) => {\r\n  const user = useSelector((state) => state.authToken.admin);\r\n\r\n  return user && props.children;\r\n};\r\n\r\nexport default AdminComponent;\r\n","import { Avatar } from \"@mui/material\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport { useRef } from \"react\";\r\n\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\n\r\nconst PreviewCard = ({\r\n  id,\r\n  image,\r\n  index,\r\n  cover,\r\n  setCoverImage,\r\n  movePhoto,\r\n  removeImage,\r\n}) => {\r\n  const ref = useRef(null);\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"previewcard\",\r\n    item: () => {\r\n      return { id, index };\r\n    },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0.7 : 1;\r\n  const [{ handlerId }, drop] = useDrop({\r\n    accept: \"previewcard\",\r\n    collect(monitor) {\r\n      return {\r\n        handlerId: monitor.getHandlerId(),\r\n      };\r\n    },\r\n    hover(item, monitor) {\r\n      if (!ref.current) {\r\n        return;\r\n      }\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return;\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n        (hoverBoundingRect.left - hoverBoundingRect.right) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.x - hoverBoundingRect.left;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Time to actually perform the action\r\n      movePhoto(dragIndex, hoverIndex);\r\n      setCoverImage(hoverIndex);\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex;\r\n    },\r\n  });\r\n\r\n  drag(drop(ref));\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        position: \"relative\",\r\n        borderRadius: 2,\r\n        border: cover ? \"5px solid #4bb543\" : \"1px solid #eaeaea\",\r\n        marginBottom: 8,\r\n        marginRight: index % 3 !== 2 ? \"calc(2%/2)\" : 0,\r\n        width: \"calc(97%/3)\",\r\n        aspectRatio: \"1/1\",\r\n        boxSizing: \"border-box\",\r\n        cursor: \"move\",\r\n        opacity,\r\n        overflow: \"hidden\",\r\n      }}\r\n      onClick={() => setCoverImage(index)}\r\n    >\r\n      <img\r\n        src={image}\r\n        alt=\"preview\"\r\n        style={{\r\n          width: \"auto\",\r\n          height: \"100%\",\r\n          objectFit: \"cover\",\r\n        }}\r\n      />\r\n      <Avatar\r\n        sx={{\r\n          position: \"absolute\",\r\n          zIndex: 99,\r\n          top: 4,\r\n          right: 4,\r\n          backgroundColor: \"#f57c00\",\r\n          cursor: \"pointer\",\r\n          width: 30,\r\n          height: 30,\r\n        }}\r\n        onClick={() => removeImage(index)}\r\n      >\r\n        <ClearIcon sx={{ color: \"white\" }} />\r\n      </Avatar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviewCard;\r\n","import { ImageListItem } from \"@mui/material\";\r\nimport { memo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MeditationONComp = ({ posts }) => {\r\n  return posts.map((post) => (\r\n    <ImageListItem key={post.ID} component={Link} to={post.ID}>\r\n      <img\r\n        src={`https://imagedelivery.net/ICo2WI8PXO_BVRlWfwzOww/${post.Cover}/thumbnail`}\r\n        alt=\"thumbnail\"\r\n        loading=\"lazy\"\r\n      />\r\n    </ImageListItem>\r\n  ));\r\n};\r\n\r\nexport const MemoizedMeditationONComp = memo(MeditationONComp);\r\n","import {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Modal,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport update from \"immutability-helper\";\r\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\n\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nimport PreviewCard from \"./PreviewCard\";\r\nimport useSnackbar from \"../../../util/useSnackbar\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"90vw\",\r\n  height: \"80vh\",\r\n  maxWidth: \"1300px\",\r\n  bgcolor: \"#ffffff\",\r\n  boxShadow: 24,\r\n  borderRadius: \"0.5em\",\r\n  p: 1,\r\n  py: 5,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst MeditationONModal = ({ isOpen, onClose }) => {\r\n  const { openSnackbar } = useSnackbar();\r\n\r\n  const handleClose = () => {\r\n    removeAllImage();\r\n    onClose();\r\n  };\r\n\r\n  const [filesToUpload, setFilesToUpload] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n\r\n  const handleChangeFile = (files) => {\r\n    setFilesToUpload((prev) => [...prev, ...files]);\r\n    files.forEach((image) => {\r\n      setImagesPreview((prev) =>\r\n        update(prev, { $push: [URL.createObjectURL(image)] })\r\n      );\r\n      // setImagesPreview((prev) => [...prev, URL.createObjectURL(image)]);\r\n    });\r\n  };\r\n\r\n  const uploadImages = async () => {\r\n    const form = new FormData();\r\n\r\n    filesToUpload.forEach((image) => {\r\n      form.append(\"images\", image);\r\n    });\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      await uploadImages(form);\r\n\r\n      openSnackbar(\"success\", \"Uploaded Succesfully!\");\r\n      handleClose();\r\n    } catch (error) {\r\n      console.log(error);\r\n      openSnackbar(\r\n        \"error\",\r\n        \"Error Occured. Please contact to the administrator.\"\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const removeImage = (i) => {\r\n    URL.revokeObjectURL(imagesPreview[i]);\r\n    setFilesToUpload((prev) =>\r\n      update(prev, {\r\n        $splice: [[i, 1]],\r\n      })\r\n    );\r\n    setImagesPreview((prev) =>\r\n      update(prev, {\r\n        $splice: [[i, 1]],\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeAllImage = () => {\r\n    imagesPreview.forEach((preview) => URL.revokeObjectURL(preview));\r\n    setFilesToUpload([]);\r\n    setImagesPreview([]);\r\n  };\r\n\r\n  const movePhoto = useCallback((dragIndex, hoverIndex) => {\r\n    setFilesToUpload((prev) =>\r\n      update(prev, {\r\n        $splice: [\r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, prev[dragIndex]],\r\n        ],\r\n      })\r\n    );\r\n    setImagesPreview((prev) =>\r\n      update(prev, {\r\n        $splice: [\r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, prev[dragIndex]],\r\n        ],\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: {\r\n      \"image/*\": [],\r\n    },\r\n    onDrop: (acceptedFiles) => {\r\n      handleChangeFile(acceptedFiles);\r\n    },\r\n    noDragEventsBubbling: true,\r\n  });\r\n\r\n  const renderCard = useCallback((image, index) => {\r\n    return (\r\n      <PreviewCard\r\n        key={index}\r\n        index={index}\r\n        image={image}\r\n        movePhoto={movePhoto}\r\n        removeImage={removeImage}\r\n      />\r\n    );\r\n  }, []);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onClose={handleClose}\r\n      // aria-labelledby=\"modal-modal-title\"\r\n      // aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style}>\r\n        {loading ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <>\r\n            <DndProvider backend={HTML5Backend}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  flexWrap: \"wrap\",\r\n                  alignContent: \"flex-start\",\r\n                  justifyContent: \"space-between\",\r\n                  margin: \"10pt\",\r\n                  width: \"95%\",\r\n                  height: \"75%\",\r\n                  overflowX: \"auto\",\r\n                }}\r\n              >\r\n                {imagesPreview.map((image, index) => renderCard(image, index))}\r\n              </div>\r\n            </DndProvider>\r\n\r\n            <div\r\n              style={{\r\n                width: \"95%\",\r\n                height: \"20%\",\r\n                border: \"1pt dotted #f57c00\",\r\n                borderRadius: \"1em\",\r\n                overflowY: \"auto\",\r\n              }}\r\n              {...getRootProps()}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <Box\r\n                sx={{\r\n                  position: \"relative\",\r\n                  height: \"100%\",\r\n                  widht: \"100%\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    top: \"50%\",\r\n                    left: \"50%\",\r\n                    transform: \"translate(-50%, -50%)\",\r\n                  }}\r\n                >\r\n                  <AddCircleOutlineIcon fontSize=\"large\" color=\"primary\" />\r\n                  <Typography>Click or Drag Files to here</Typography>\r\n                </div>\r\n              </Box>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", marginTop: \"2em\" }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                disabled={filesToUpload.length <= 0}\r\n                onClick={uploadImages}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={removeAllImage}\r\n                disabled={filesToUpload.length <= 0}\r\n              >\r\n                Clear All\r\n              </Button>\r\n              <Button variant=\"outlined\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default MeditationONModal;\r\n","import axios from \"axios\";\r\n\r\nexport const getPosts = async (posts) => {\r\n  try {\r\n    return await axios.get(\r\n      `/api/MeditationON/getPosts${\r\n        posts.length === 0\r\n          ? \"\"\r\n          : `?lastVisible=${posts.at(-1).ID}&timeStamp=${\r\n              posts.at(-1).Timestamp\r\n            }`\r\n      }`\r\n    );\r\n  } catch {\r\n    throw new Error();\r\n  }\r\n};\r\n\r\nexport const uploadImages = async (form) => {\r\n  try {\r\n    await axios.post(\"/api/meditationON/uploadImage\", form, {\r\n      headers: {\r\n        \"Content-Type\": `multipart/form-data`,\r\n      },\r\n    });\r\n  } catch {\r\n    throw new Error();\r\n  }\r\n};\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nimport {\r\n  CircularProgress,\r\n  Fab,\r\n  ImageList,\r\n  Stack,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport { MemoizedMeditationONComp } from \"../../../components/Online/MeditationON/MeditationONImageListItem\";\r\nimport MeditationONModal from \"../../../components/Online/MeditationON/MeditationONModal\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nimport \"../../NextGen/NextGen.css\";\r\nimport AdminComponent from \"../../../common/AdminComponent\";\r\nimport Footer from \"../../../header/Footer\";\r\nimport useModals from \"../../../util/useModal\";\r\nimport { getPosts } from \"../../../api/meditationon\";\r\n\r\nconst PAGE_SIZE = 12;\r\nconst titleBackground = {\r\n  backgroundImage:\r\n    'linear-gradient(rgba(0, 0, 0, 0.45), rgba(0, 0, 0, 0.45)), url(\"/img/Online/MeditationON.webp\")',\r\n};\r\n\r\nconst MeditationON = () => {\r\n  const matches = useMediaQuery(\"(min-width:1200px)\");\r\n\r\n  const { openModal } = useModals();\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [end, setEnd] = useState(false);\r\n  const [restored, setRestored] = useState(null);\r\n\r\n  const onLoad = async () => {\r\n    console.log(\"test getPosts\");\r\n\r\n    const result = await getPosts(posts);\r\n\r\n    if (result.data.length > 0) {\r\n      setPosts((prev) => [...prev, ...result.data]);\r\n    } else {\r\n      setEnd(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (posts.length % PAGE_SIZE !== 0) {\r\n      setEnd(true);\r\n    }\r\n  }, [posts]);\r\n\r\n  useEffect(() => {\r\n    window.onpopstate = () => {\r\n      setRestored(true);\r\n      console.log(\"test restore\");\r\n      setPosts(JSON.parse(sessionStorage.getItem(\"posts\")));\r\n    };\r\n    setRestored(false);\r\n    return () => {\r\n      window.onpopstate = () => {};\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (restored !== null && !restored) {\r\n      onLoad();\r\n    }\r\n  }, [restored]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.setItem(\"posts\", JSON.stringify(posts));\r\n    };\r\n  });\r\n\r\n  const scrollRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current && !end && posts.length >= 12) {\r\n      setTimeout(() => {\r\n        try {\r\n          const contentHeight = scrollRef.current.clientHeight;\r\n          const screenHeight = window.innerHeight - 500;\r\n\r\n          console.log(\"test content\", contentHeight);\r\n          console.log(\"test screen\", screenHeight);\r\n\r\n          if (contentHeight > 100 && contentHeight < screenHeight) {\r\n            onLoad();\r\n          }\r\n        } catch (error) {}\r\n      }, 500);\r\n    }\r\n\r\n    // re-run effect when items change\r\n  }, [posts]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title-wrapper\" style={titleBackground}>\r\n        <div className=\"title\">\r\n          <Typography\r\n            variant=\"h4\"\r\n            fontWeight={830}\r\n            sx={{ letterSpacing: \"0.4em\", pl: \"0.4em\", color: \"white\" }}\r\n          >\r\n            묵상 ON\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container-wrapper\">\r\n        <div\r\n          className=\"container\"\r\n          style={{\r\n            padding: \"0em 0.2em\",\r\n          }}\r\n        >\r\n          {posts.length <= 0 ? (\r\n            <Stack alignItems=\"center\">\r\n              <CircularProgress />\r\n            </Stack>\r\n          ) : (\r\n            <InfiniteScroll\r\n              dataLength={posts.length}\r\n              next={onLoad}\r\n              hasMore={!end}\r\n              loader={\r\n                <Stack alignItems=\"center\">\r\n                  <CircularProgress />\r\n                </Stack>\r\n              }\r\n              scrollThreshold={1}\r\n              style={{ overflowY: \"hidden\" }}\r\n            >\r\n              {\r\n                <ImageList ref={scrollRef} cols={matches ? 4 : 3} gap={2.5}>\r\n                  <MemoizedMeditationONComp posts={posts} />\r\n                </ImageList>\r\n              }\r\n            </InfiniteScroll>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <AdminComponent>\r\n        <Fab\r\n          variant=\"primary\"\r\n          style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\r\n          onClick={() => openModal(MeditationONModal, {})}\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n      </AdminComponent>\r\n\r\n      {end && <Footer />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MeditationON;\r\n"],"names":["props","useSelector","state","authToken","admin","children","_ref","id","image","index","cover","setCoverImage","movePhoto","removeImage","ref","useRef","isDragging","drag","useDrag","type","item","collect","monitor","opacity","handlerId","drop","useDrop","accept","getHandlerId","hover","_ref$current","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","left","right","hoverClientY","getClientOffset","x","_jsxs","style","position","borderRadius","border","marginBottom","marginRight","width","aspectRatio","boxSizing","cursor","overflow","onClick","_jsx","src","alt","height","objectFit","Avatar","sx","zIndex","top","backgroundColor","ClearIcon","color","MeditationONComp","posts","map","post","ImageListItem","component","Link","to","ID","concat","Cover","loading","MemoizedMeditationONComp","memo","transform","maxWidth","bgcolor","boxShadow","p","py","display","flexDirection","alignItems","justifyContent","isOpen","onClose","openSnackbar","useSnackbar","handleClose","removeAllImage","filesToUpload","setFilesToUpload","useState","imagesPreview","setImagesPreview","uploadImages","async","form","FormData","forEach","append","setLoading","error","console","log","i","URL","revokeObjectURL","prev","update","$splice","preview","useCallback","getRootProps","getInputProps","useDropzone","onDrop","acceptedFiles","files","$push","createObjectURL","noDragEventsBubbling","renderCard","PreviewCard","Modal","open","Box","CircularProgress","_Fragment","DndProvider","backend","HTML5Backend","flexWrap","alignContent","margin","overflowX","overflowY","widht","AddCircleOutlineIcon","fontSize","Typography","marginTop","Button","variant","disabled","length","titleBackground","backgroundImage","MeditationON","matches","useMediaQuery","openModal","useModals","setPosts","end","setEnd","restored","setRestored","onLoad","result","axios","get","at","Timestamp","Error","getPosts","data","useEffect","window","onpopstate","JSON","parse","sessionStorage","getItem","setItem","stringify","scrollRef","setTimeout","contentHeight","clientHeight","screenHeight","innerHeight","className","fontWeight","letterSpacing","pl","padding","Stack","InfiniteScroll","dataLength","next","hasMore","loader","scrollThreshold","ImageList","cols","gap","AdminComponent","Fab","bottom","MeditationONModal","AddIcon","Footer"],"sourceRoot":""}