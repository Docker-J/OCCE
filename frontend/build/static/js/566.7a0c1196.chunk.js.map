{"version":3,"file":"static/js/566.7a0c1196.chunk.js","mappings":"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","sources":["pages/Photos/MeditationONComp.js","pages/Photos/PhotoUploadModal.js","pages/Photos/Photos.js"],"sourcesContent":["import { ImageListItem, ImageListItemBar } from \"@mui/material\";\r\nimport { memo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MeditationONComp = ({ photos }) => {\r\n  return photos.map((post) => (\r\n    <ImageListItem key={post.id} component={Link} to={post.id}>\r\n      <img\r\n        // src={`${\r\n        //   item.data().images[0]\r\n        // }?w=164&h=164&fit=crop&auto=format`}\r\n        src={post.cover}\r\n        // onClick={}\r\n        // srcSet={`${\r\n        //   item.data().images[0]\r\n        // }?w=164&h=164&fit=crop&auto=format&dpr=2 2x`}\r\n        alt=\"test\"\r\n        loading=\"lazy\"\r\n      />\r\n      <ImageListItemBar title={post.title} />\r\n    </ImageListItem>\r\n  ));\r\n};\r\n\r\nexport const MemoizedMeditationONComp = memo(MeditationONComp);\r\n","import { Box, Button, Modal, TextField } from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport imageCompression from \"browser-image-compression\";\r\n\r\nconst MeditationONModal = ({ openModal, setOpenModal }) => {\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"800px\",\r\n    height: \"800px\",\r\n    bgcolor: \"#ffffff\",\r\n    border: \"0.1px solid #f57c00\",\r\n    boxShadow: 24,\r\n    p: 2,\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const [albumURL, setAlbumURL] = useState(\"\");\r\n\r\n  async function post() {\r\n    await axios.post(\"/api/photos/uploadAlbum\", {\r\n      url: albumURL,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      open={openModal}\r\n      onClose={handleClose}\r\n      // aria-labelledby=\"modal-modal-title\"\r\n      // aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style} bgcolor=\"white\">\r\n        <TextField\r\n          type=\"url\"\r\n          helperText=\"Enter the album URL\"\r\n          onChange={(event) => setAlbumURL(event.currentTarget.value)}\r\n        />\r\n\r\n        <Button onClick={post} variant=\"contained\" component=\"label\">\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default MeditationONModal;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { CircularProgress, Fab, ImageList } from \"@mui/material\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport axios from \"axios\";\r\nimport { MemoizedMeditationONComp } from \"./MeditationONComp\";\r\nimport MeditationONModal from \"./PhotoUploadModal\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst PAGE_SIZE = 12;\r\n\r\nconst Photos = () => {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [end, setEnd] = useState(false);\r\n  const [restored, setRestored] = useState(true);\r\n\r\n  const getPhotos = async () => {\r\n    console.log(\"test getPosts\");\r\n\r\n    const result = await axios.get(\r\n      `/api/photos/getPhotos${\r\n        photos.length === 0 ? \"\" : `?lastVisible=${photos.at(-1).id}`\r\n      }`\r\n    );\r\n    setPhotos((prev) => [...prev, ...result.data]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (photos.length % PAGE_SIZE !== 0) {\r\n      setEnd(true);\r\n    }\r\n  }, [photos]);\r\n\r\n  const restore = () => {\r\n    setRestored(true);\r\n    console.log(\"test restore\");\r\n    setPhotos(JSON.parse(sessionStorage.getItem(\"photos\")));\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.onpopstate = () => {\r\n      restore();\r\n    };\r\n    setRestored(false);\r\n    return () => {\r\n      window.onpopstate = () => {};\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!restored) {\r\n      getPhotos();\r\n    }\r\n  }, [restored]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.setItem(\"photos\", JSON.stringify(photos));\r\n    };\r\n  });\r\n\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpenModal(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>사진</h1>\r\n\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          maxWidth: \"1500px\",\r\n          left: \"50%\",\r\n          transform: \"translateX(-50%)\",\r\n        }}\r\n      >\r\n        {photos.length !== 0 ? (\r\n          <InfiniteScroll\r\n            dataLength={photos.length}\r\n            next={getPhotos}\r\n            hasMore={!end}\r\n            loader={<CircularProgress />}\r\n            scrollThreshold={0.75}\r\n            // scrollableTarget=\"scrollableDiv\"\r\n            style={{ overflowY: \"hidden\" }}\r\n          >\r\n            {\r\n              <ImageList sx={{ mx: \"0.5rem\" }} cols={3} gap={2.5}>\r\n                <MemoizedMeditationONComp photos={photos} />\r\n              </ImageList>\r\n            }\r\n          </InfiniteScroll>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </div>\r\n      <Fab\r\n        variant=\"primary\"\r\n        style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\r\n        onClick={handleOpen}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      <MeditationONModal openModal={openModal} setOpenModal={setOpenModal} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Photos;\r\n"],"names":["MeditationONComp","_ref","photos","map","post","_jsxs","ImageListItem","component","Link","to","id","children","_jsx","src","cover","alt","loading","ImageListItemBar","title","MemoizedMeditationONComp","memo","openModal","setOpenModal","albumURL","setAlbumURL","useState","Modal","open","onClose","handleClose","Box","sx","position","top","left","transform","width","height","bgcolor","border","boxShadow","p","TextField","type","helperText","onChange","event","currentTarget","value","Button","onClick","async","axios","url","variant","Photos","setPhotos","end","setEnd","restored","setRestored","getPhotos","console","log","result","concat","length","at","prev","data","useEffect","window","onpopstate","JSON","parse","sessionStorage","getItem","setItem","stringify","_Fragment","style","maxWidth","InfiniteScroll","dataLength","next","hasMore","loader","CircularProgress","scrollThreshold","overflowY","ImageList","mx","cols","gap","Fab","right","bottom","handleOpen","AddIcon","MeditationONModal"],"sourceRoot":""}