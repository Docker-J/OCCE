{"version":3,"file":"static/js/422.1d10f491.chunk.js","mappings":"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","sources":["common/ButtonDatePicker.js","common/Forum/ForumPostBoard.js","components/News/Announcement/BoardPagination.js","components/News/Columns/ColumnPostModal.js","pages/News/Columns/Columns.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFnsV3\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst ButtonField = (props) => {\r\n  const {\r\n    setIsDatePickerOpen,\r\n    id,\r\n    disabled,\r\n    value,\r\n    InputProps: { ref } = {},\r\n    inputProps: { \"aria-label\": ariaLabel } = {},\r\n  } = props;\r\n\r\n  return (\r\n    <Button\r\n      variant=\"outlined\"\r\n      size=\"large\"\r\n      id={id}\r\n      disabled={disabled}\r\n      ref={ref}\r\n      aria-label={ariaLabel}\r\n      onClick={() => setIsDatePickerOpen?.((prev) => !prev)}\r\n    >\r\n      {format(value, \"yyyy/MM/dd\")}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst ButtonDatePicker = (props) => {\r\n  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);\r\n  const { disableDate, ...restProps } = props;\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DatePicker\r\n        slots={{ field: ButtonField }}\r\n        slotProps={{\r\n          field: { setIsDatePickerOpen },\r\n          popper: { placement: \"bottom\" },\r\n        }}\r\n        {...restProps}\r\n        open={isDatePickerOpen}\r\n        onClose={() => setIsDatePickerOpen(false)}\r\n        shouldDisableDate={(date) => disableDate && disableDate(date)}\r\n        disableHighlightToday\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default ButtonDatePicker;\r\n","import { Box, Card, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\r\nimport MovieIcon from \"@mui/icons-material/Movie\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\n\r\nconst ForumPostBoard = ({ announcements }) => {\r\n  function getText(html) {\r\n    let doc = new DOMParser().parseFromString(html, \"text/html\");\r\n    let allTextNodes = Array.from(doc.body.childNodes).filter(\r\n      (node) =>\r\n        node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE\r\n    );\r\n    return allTextNodes.map((node) => node.textContent.trim()).join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      {announcements.map((announcement, index) => (\r\n        <div key={announcement.id}>\r\n          <Card\r\n            component={Link}\r\n            to={announcement.id}\r\n            color=\"black\"\r\n            sx={{\r\n              display: \"flex\",\r\n              textDecoration: \"none\",\r\n              backgroundColor: announcement?.pin ? \"lightgrey\" : null,\r\n              px: 2,\r\n              my: 1.8,\r\n            }}\r\n            elevation={3}\r\n          >\r\n            <Stack\r\n              direction=\"column\"\r\n              sx={{\r\n                justifyContent: \"center\",\r\n                width: \"42px\",\r\n              }}\r\n            >\r\n              <Typography variant=\"body2\" whiteSpace=\"nowrap\">\r\n                {format(new Date(announcement.timestamp), \"MMM dd\")}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {format(new Date(announcement.timestamp), \"yyyy\")}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            <Divider orientation=\"vertical\" flexItem sx={{ mx: 2, my: 1 }} />\r\n\r\n            <Box\r\n              sx={{\r\n                py: 2,\r\n                overflow: \"hidden\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                {announcement?.pin ? (\r\n                  <PushPinIcon fontSize=\"small\" sx={{ m: 0 }} />\r\n                ) : null}\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  fontWeight={700}\r\n                  sx={{\r\n                    whiteSpace: \"nowrap\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                  }}\r\n                >\r\n                  {announcement.title}\r\n                </Typography>\r\n              </Stack>\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                <p\r\n                  style={{\r\n                    fontSize: \"0.9em\",\r\n                    lineHeight: \"1.2\",\r\n                    height: \"2.4em\",\r\n                    margin: 0,\r\n                    marginTop: 12,\r\n                    display: \"-webkit-box\",\r\n                    WebkitBoxOrient: \"vertical\",\r\n                    WebkitLineClamp: \"2\",\r\n                    width: \"100%\",\r\n                    wordBreak: \"break-all\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                  }}\r\n                >\r\n                  {getText(announcement.body)}\r\n                </p>\r\n                {announcement.images !== null ? <PhotoIcon /> : null}\r\n                {announcement.video ? <MovieIcon /> : null}\r\n              </Stack>\r\n            </Box>\r\n          </Card>\r\n          {/* {index !== announcements.length - 1 && <Divider variant=\"middle\" />} */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForumPostBoard;\r\n","import { Pagination } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst BoardPagination = ({ pages, currentPage }) => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Pagination\r\n      className=\"pagination\"\r\n      count={pages === 0 ? 1 : pages}\r\n      page={Number(currentPage)}\r\n      variant=\"outlined\"\r\n      color=\"primary\"\r\n      // hideNextButton={pages === 1}\r\n      // hidePrevButton={pages === numberOfAnnouncements}\r\n      sx={{\r\n        margin: \"auto\",\r\n        mt: 4,\r\n      }}\r\n      onChange={(_, pageNumber) => navigate(`?page=${pageNumber}`)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BoardPagination;\r\n","import { Button, CircularProgress, TextField } from \"@mui/material\";\r\nimport TextEditor from \"../Announcement/TextEditor\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { postColumn } from \"../../../api/columns\";\r\nimport useSnackbar from \"../../../util/useSnackbar\";\r\nimport CustomModal from \"../../../common/CustomModal\";\r\nimport ButtonDatePicker from \"../../../common/ButtonDatePicker\";\r\n\r\nconst ColumnPostModal = ({\r\n  isOpen,\r\n  onClose,\r\n  revalidator,\r\n  id,\r\n  origTitle,\r\n  origBody,\r\n}) => {\r\n  const { openSnackbar } = useSnackbar();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [title, setTitle] = useState(origTitle);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [body, setBody] = useState(origBody);\r\n\r\n  const onSubmit = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await postColumn(id, title, body, selectedDate);\r\n\r\n      revalidator();\r\n      openSnackbar(\"success\", \"The column is successfully posted!\");\r\n      handleClose();\r\n    } catch (error) {\r\n      console.log(error);\r\n      openSnackbar(\r\n        \"error\",\r\n        \"Error Occured. Please contact to the administrator.\"\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTitle(origTitle);\r\n    setBody(origBody);\r\n  }, [origTitle, origBody]);\r\n\r\n  const handleClose = () => {\r\n    setTitle(origTitle);\r\n    setBody(origBody);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      isOpen={isOpen}\r\n      onClose={handleClose}\r\n      maxWidth=\"1300px\"\r\n      maxHeight=\"90svh\"\r\n    >\r\n      {loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <>\r\n          <div style={{ width: \"100%\" }}>\r\n            <TextField\r\n              id=\"filled-basic\"\r\n              label=\"Title\"\r\n              variant=\"outlined\"\r\n              value={title}\r\n              sx={{ width: \"85%\" }}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              required\r\n            />\r\n\r\n            <ButtonDatePicker\r\n              sx={{ width: \"10%\" }}\r\n              value={selectedDate}\r\n              onChange={setSelectedDate}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ height: \"65svh\", width: \"100%\", marginTop: \"1em\" }}>\r\n            <TextEditor body={body} getBody={setBody} />\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"outlined\"\r\n            disabled={title.trim() === \"\" || body.trim() === \"\"}\r\n            onClick={onSubmit}\r\n            fullWidth\r\n            sx={{ marginTop: \"1.5em\" }}\r\n          >\r\n            Post\r\n          </Button>\r\n        </>\r\n      )}\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnPostModal;\r\n","import {\r\n  Await,\r\n  useLoaderData,\r\n  useNavigation,\r\n  useRevalidator,\r\n  useSearchParams,\r\n} from \"react-router-dom\";\r\n\r\nimport { CircularProgress, Fab, Typography } from \"@mui/material\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport ColumnPostModal from \"../../../components/News/Columns/ColumnPostModal\";\r\nimport ForumPostBoard from \"../../../common/Forum/ForumPostBoard\";\r\nimport BoardPagination from \"../../../components/News/Announcement/BoardPagination\";\r\n\r\nimport useModals from \"../../../util/useModal\";\r\nimport AdminComponent from \"../../../common/AdminComponent\";\r\nimport { Suspense } from \"react\";\r\nimport FullScreenLoading from \"../../../common/FullScreenLoading\";\r\n\r\nimport \"./Announcements.css\";\r\n\r\nconst titleBackground = {\r\n  backgroundImage: 'url(\"/img/News/Columns/Columns.webp\")',\r\n  backgroundPosition: \"25% 65%\",\r\n};\r\n\r\nconst Columns = () => {\r\n  let revalidator = useRevalidator();\r\n\r\n  const data = useLoaderData();\r\n  const { state } = useNavigation();\r\n  const [searchParams] = useSearchParams();\r\n  const page = searchParams.get(\"page\");\r\n\r\n  const { openModal } = useModals();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title-wrapper\" style={titleBackground}>\r\n        <div className=\"title\">\r\n          <Typography\r\n            variant=\"h4\"\r\n            fontWeight={830}\r\n            sx={{ letterSpacing: \"0.4em\", pl: \"0.4em\", color: \"white\" }}\r\n          >\r\n            목회칼럼\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container-wrapper\">\r\n        <div className=\"container\" style={{ maxWidth: \"1200px\" }}>\r\n          {state === \"loading\" && (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <FullScreenLoading />\r\n            </div>\r\n          )}\r\n\r\n          <Suspense\r\n            fallback={\r\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <CircularProgress />\r\n              </div>\r\n            }\r\n          >\r\n            <Await\r\n              resolve={data.announcementsData}\r\n              errorElement={<p>Error loading!</p>}\r\n            >\r\n              {({ data }) => {\r\n                return data.announcements.length === 0 ? (\r\n                  <Typography align=\"center\">\r\n                    게시물이 존재하지 않습니다.\r\n                  </Typography>\r\n                ) : (\r\n                  <>\r\n                    <ForumPostBoard announcements={data.announcements} />\r\n                    <BoardPagination\r\n                      pages={Math.ceil(data.count / 10)}\r\n                      currentPage={page}\r\n                    />\r\n                  </>\r\n                );\r\n              }}\r\n            </Await>\r\n          </Suspense>\r\n        </div>\r\n      </div>\r\n\r\n      <AdminComponent>\r\n        <Fab\r\n          style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\r\n          onClick={() =>\r\n            openModal(ColumnPostModal, {\r\n              revalidator: revalidator.revalidate,\r\n              origTitle: \"\",\r\n              origBody: \"\",\r\n            })\r\n          }\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n      </AdminComponent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Columns;\r\n"],"names":["ButtonField","props","setIsDatePickerOpen","id","disabled","value","InputProps","ref","inputProps","ariaLabel","_jsx","Button","variant","size","onClick","prev","children","format","isDatePickerOpen","useState","disableDate","restProps","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","slots","field","slotProps","popper","placement","open","onClose","shouldDisableDate","date","disableHighlightToday","_ref","announcements","getText","html","doc","DOMParser","parseFromString","Array","from","body","childNodes","filter","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","map","textContent","trim","join","style","display","flexDirection","announcement","index","_jsxs","Card","component","Link","to","color","sx","textDecoration","backgroundColor","pin","px","my","elevation","Stack","direction","justifyContent","width","Typography","whiteSpace","Date","timestamp","Divider","orientation","flexItem","mx","Box","py","overflow","alignItems","PushPinIcon","fontSize","m","fontWeight","textOverflow","title","lineHeight","height","margin","marginTop","WebkitBoxOrient","WebkitLineClamp","wordBreak","images","PhotoIcon","video","MovieIcon","pages","currentPage","navigate","useNavigate","Pagination","className","count","page","Number","mt","onChange","_","pageNumber","isOpen","revalidator","origTitle","origBody","openSnackbar","useSnackbar","loading","setLoading","setTitle","selectedDate","setSelectedDate","setBody","useEffect","handleClose","CustomModal","maxWidth","maxHeight","CircularProgress","_Fragment","TextField","label","e","target","required","ButtonDatePicker","TextEditor","getBody","async","postColumn","error","console","log","fullWidth","titleBackground","backgroundImage","backgroundPosition","Columns","useRevalidator","data","useLoaderData","state","useNavigation","searchParams","useSearchParams","get","openModal","useModals","letterSpacing","pl","FullScreenLoading","Suspense","fallback","Await","resolve","announcementsData","errorElement","length","align","ForumPostBoard","BoardPagination","Math","ceil","AdminComponent","Fab","position","right","bottom","ColumnPostModal","revalidate","AddIcon"],"sourceRoot":""}