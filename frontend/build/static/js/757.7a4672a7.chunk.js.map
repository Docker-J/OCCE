{"version":3,"file":"static/js/757.7a4672a7.chunk.js","mappings":"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","sources":["components/News/Announcement/BoardTable.js","components/News/Announcement/BoardPagination.js","pages/News/Announcements/Announcements.js"],"sourcesContent":["import { Box, Card, Divider, Stack, Typography } from \"@mui/material\";\nimport { format } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\n\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\nimport MovieIcon from \"@mui/icons-material/Movie\";\nimport PhotoIcon from \"@mui/icons-material/Photo\";\n\nconst BoardTable = ({ announcements }) => {\n  function getText(html) {\n    let doc = new DOMParser().parseFromString(html, \"text/html\");\n    let allTextNodes = Array.from(doc.body.childNodes).filter(\n      (node) =>\n        node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE\n    );\n    return allTextNodes.map((node) => node.textContent.trim()).join(\" \");\n  }\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      {announcements.map((announcement, index) => (\n        <div key={announcement.id}>\n          <Card\n            component={Link}\n            to={announcement.id}\n            color=\"black\"\n            sx={{\n              display: \"flex\",\n              textDecoration: \"none\",\n              backgroundColor: announcement.pin ? \"lightgrey\" : null,\n              px: 2,\n              py: 0,\n              my: 1.8,\n            }}\n          >\n            <Stack\n              direction=\"column\"\n              sx={{\n                justifyContent: \"center\",\n                width: \"40px\",\n                minWidth: \"40px\",\n              }}\n            >\n              <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                {format(new Date(announcement.timestamp), \"MMM dd\")}\n              </Typography>\n              <Typography variant=\"body2\">\n                {format(new Date(announcement.timestamp), \"yyyy\")}\n              </Typography>\n            </Stack>\n\n            <Divider orientation=\"vertical\" flexItem sx={{ mx: 2 }} />\n\n            <Box\n              sx={{\n                py: 1.5,\n                flexGrow: 1,\n                overflow: \"hidden\",\n              }}\n            >\n              <Stack direction=\"row\" alignItems=\"center\">\n                {announcement.pin ? (\n                  <PushPinIcon fontSize=\"small\" sx={{ m: 0 }} />\n                ) : null}\n                <Typography\n                  variant=\"h6\"\n                  sx={{\n                    whiteSpace: \"nowrap\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                  }}\n                >\n                  {announcement.title}\n                </Typography>\n              </Stack>\n              <Stack direction=\"row\" alignItems=\"center\">\n                <p\n                  style={{\n                    fontSize: \"0.9em\",\n                    lineHeight: \"1.2em\",\n                    height: \"2.4em\",\n                    margin: 0,\n                    marginTop: 12,\n                    display: \"-webkit-box\",\n                    WebkitBoxOrient: \"vertical\",\n                    WebkitLineClamp: \"2\",\n                    width: \"100%\",\n                    wordBreak: \"break-all\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                  }}\n                >\n                  {getText(announcement.body)}\n                </p>\n                {announcement.images !== null ? <PhotoIcon /> : null}\n                {announcement.video ? <MovieIcon /> : null}\n              </Stack>\n            </Box>\n          </Card>\n          {index !== announcements.length - 1 && <Divider variant=\"middle\" />}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BoardTable;\n","import { Pagination } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst BoardPagination = ({ pages, currentPage }) => {\n  const navigate = useNavigate();\n\n  return (\n    <Pagination\n      className=\"pagination\"\n      count={pages === 0 ? 1 : pages}\n      page={Number(currentPage)}\n      variant=\"outlined\"\n      color=\"primary\"\n      // hideNextButton={pages === 1}\n      // hidePrevButton={pages === numberOfAnnouncements}\n      sx={{\n        margin: \"auto\",\n        mt: 4,\n      }}\n      onChange={(_, pageNumber) => navigate(`?page=${pageNumber}`)}\n    />\n  );\n};\n\nexport default BoardPagination;\n","import {\n  Await,\n  useLoaderData,\n  useNavigation,\n  useRevalidator,\n  useSearchParams,\n} from \"react-router-dom\";\n\nimport { CircularProgress, Fab, Typography } from \"@mui/material\";\n\nimport AddIcon from \"@mui/icons-material/Add\";\n\nimport \"./Announcements.css\";\nimport AnnouncementPostModal from \"../../../components/News/Announcement/AnnouncementPostModal\";\nimport BoardTable from \"../../../components/News/Announcement/BoardTable\";\n\nimport \"../../NextGen/NextGen.css\";\nimport BoardPagination from \"../../../components/News/Announcement/BoardPagination\";\nimport useModals from \"../../../util/useModal\";\nimport AdminComponent from \"../../../common/AdminComponent\";\nimport { Suspense } from \"react\";\nimport FullScreenLoading from \"../../../common/FullScreenLoading\";\n\nconst titleBackground = {\n  backgroundImage:\n    'linear-gradient(rgba(0, 0, 0, 0.30), rgba(0, 0, 0, 0.30)),  url(\"/img/News/Announcements/Announcements.webp\")',\n};\n\nconst Announcements = () => {\n  let revalidator = useRevalidator();\n\n  const data = useLoaderData();\n  const { state } = useNavigation();\n  const [searchParams] = useSearchParams();\n  const page = searchParams.get(\"page\");\n\n  const { openModal } = useModals();\n\n  return (\n    <>\n      <div className=\"title-wrapper\" style={titleBackground}>\n        <div className=\"title\">\n          <Typography\n            variant=\"h4\"\n            fontWeight={830}\n            sx={{ letterSpacing: \"0.4em\", pl: \"0.4em\", color: \"white\" }}\n          >\n            공지사항\n          </Typography>\n        </div>\n      </div>\n\n      <div className=\"container-wrapper\">\n        <div className=\"container\" style={{ maxWidth: \"1200px\" }}>\n          {state === \"loading\" && (\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <FullScreenLoading />\n            </div>\n          )}\n\n          <Suspense\n            fallback={\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                <CircularProgress />\n              </div>\n            }\n          >\n            <Await\n              resolve={data.announcementsData}\n              errorElement={<p>Error loading!</p>}\n            >\n              {({ data }) => {\n                return data.announcements.length === 0 ? (\n                  <Typography align=\"center\">\n                    게시물이 존재하지 않습니다.\n                  </Typography>\n                ) : (\n                  <>\n                    <BoardTable announcements={data.announcements} />\n                    <BoardPagination\n                      pages={Math.ceil(data.count / 10)}\n                      currentPage={page}\n                    />\n                  </>\n                );\n              }}\n            </Await>\n          </Suspense>\n        </div>\n      </div>\n\n      <AdminComponent>\n        <Fab\n          style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\n          onClick={() =>\n            openModal(AnnouncementPostModal, {\n              revalidator: revalidator.revalidate,\n              origTitle: \"\",\n              origBody: \"\",\n            })\n          }\n        >\n          <AddIcon />\n        </Fab>\n      </AdminComponent>\n    </>\n  );\n};\n\nexport default Announcements;\n"],"names":["_ref","announcements","getText","html","doc","DOMParser","parseFromString","Array","from","body","childNodes","filter","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","map","textContent","trim","join","_jsx","style","display","flexDirection","children","announcement","index","_jsxs","Card","component","Link","to","id","color","sx","textDecoration","backgroundColor","pin","px","py","my","Stack","direction","justifyContent","width","minWidth","Typography","variant","whiteSpace","format","Date","timestamp","Divider","orientation","flexItem","mx","Box","flexGrow","overflow","alignItems","PushPinIcon","fontSize","m","textOverflow","title","lineHeight","height","margin","marginTop","WebkitBoxOrient","WebkitLineClamp","wordBreak","images","PhotoIcon","video","MovieIcon","length","pages","currentPage","navigate","useNavigate","Pagination","className","count","page","Number","mt","onChange","_","pageNumber","titleBackground","backgroundImage","Announcements","revalidator","useRevalidator","data","useLoaderData","state","useNavigation","searchParams","useSearchParams","get","openModal","useModals","_Fragment","fontWeight","letterSpacing","pl","maxWidth","FullScreenLoading","Suspense","fallback","CircularProgress","Await","resolve","announcementsData","errorElement","align","BoardTable","BoardPagination","Math","ceil","AdminComponent","Fab","position","right","bottom","onClick","AnnouncementPostModal","revalidate","origTitle","origBody","AddIcon"],"sourceRoot":""}