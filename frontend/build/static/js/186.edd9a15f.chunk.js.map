{"version":3,"file":"static/js/186.edd9a15f.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Divider/Divider.js","../node_modules/@ckeditor/ckeditor5-integrations-common/src/utils/uid.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/utils/version/isSemanticVersion.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/cdn/ck/isCKCdnVersion.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/utils/version/destructureSemanticVersion.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/license/getLicenseVersionFromEditorVersion.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/installation-info/getCKBaseBundleInstallationInfo.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/license/isCKEditorFreeLicense.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/installation-info/getSupportedLicenseVersionInstallationInfo.ts","../node_modules/@ckeditor/ckeditor5-react/src/lifecycle/LifeCycleElementSemaphore.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/utils/once.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/utils/defer.ts","../node_modules/@ckeditor/ckeditor5-react/src/context/setCKEditorReactContextMetadata.ts","../node_modules/@ckeditor/ckeditor5-react/src/hooks/useIsMountedRef.ts","../node_modules/@ckeditor/ckeditor5-react/src/context/ckeditorcontext.tsx","../node_modules/@ckeditor/ckeditor5-react/src/plugins/ReactIntegrationUsageDataPlugin.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/plugins/IntegrationUsageDataPlugin.ts","../node_modules/@ckeditor/ckeditor5-react/src/plugins/appendAllIntegrationPluginsToConfig.ts","../node_modules/@ckeditor/ckeditor5-integrations-common/src/plugins/appendExtraPluginsToEditorConfig.ts","../node_modules/@ckeditor/ckeditor5-react/src/ckeditor.tsx","../node_modules/@ckeditor/ckeditor5-react/src/utils/mergeRefs.ts","../node_modules/@ckeditor/ckeditor5-react/src/hooks/useInstantEffect.ts","../node_modules/@ckeditor/ckeditor5-react/src/useMultiRootEditor.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getDividerUtilityClass } from \"./dividerClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    absolute,\n    children,\n    classes,\n    flexItem,\n    light,\n    orientation,\n    textAlign,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],\n    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']\n  };\n  return composeClasses(slots, getDividerUtilityClass, classes);\n};\nconst DividerRoot = styled('div', {\n  name: 'MuiDivider',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  margin: 0,\n  // Reset browser default style.\n  flexShrink: 0,\n  borderWidth: 0,\n  borderStyle: 'solid',\n  borderColor: (theme.vars || theme).palette.divider,\n  borderBottomWidth: 'thin',\n  variants: [{\n    props: {\n      absolute: true\n    },\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: '100%'\n    }\n  }, {\n    props: {\n      light: true\n    },\n    style: {\n      borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)\n    }\n  }, {\n    props: {\n      variant: 'inset'\n    },\n    style: {\n      marginLeft: 72\n    }\n  }, {\n    props: {\n      variant: 'middle',\n      orientation: 'horizontal'\n    },\n    style: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    }\n  }, {\n    props: {\n      variant: 'middle',\n      orientation: 'vertical'\n    },\n    style: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  }, {\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      height: '100%',\n      borderBottomWidth: 0,\n      borderRightWidth: 'thin'\n    }\n  }, {\n    props: {\n      flexItem: true\n    },\n    style: {\n      alignSelf: 'stretch',\n      height: 'auto'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => !!ownerState.children,\n    style: {\n      display: 'flex',\n      textAlign: 'center',\n      border: 0,\n      borderTopStyle: 'solid',\n      borderLeftStyle: 'solid',\n      '&::before, &::after': {\n        content: '\"\"',\n        alignSelf: 'center'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.children && ownerState.orientation !== 'vertical',\n    style: {\n      '&::before, &::after': {\n        width: '100%',\n        borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,\n        borderTopStyle: 'inherit'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.orientation === 'vertical' && ownerState.children,\n    style: {\n      flexDirection: 'column',\n      '&::before, &::after': {\n        height: '100%',\n        borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,\n        borderLeftStyle: 'inherit'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical',\n    style: {\n      '&::before': {\n        width: '90%'\n      },\n      '&::after': {\n        width: '10%'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical',\n    style: {\n      '&::before': {\n        width: '10%'\n      },\n      '&::after': {\n        width: '90%'\n      }\n    }\n  }]\n})));\nconst DividerWrapper = styled('span', {\n  name: 'MuiDivider',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'inline-block',\n  paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,\n  paddingRight: `calc(${theme.spacing(1)} * 1.2)`,\n  whiteSpace: 'nowrap',\n  variants: [{\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      paddingTop: `calc(${theme.spacing(1)} * 1.2)`,\n      paddingBottom: `calc(${theme.spacing(1)} * 1.2)`\n    }\n  }]\n})));\nconst Divider = /*#__PURE__*/React.forwardRef(function Divider(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDivider'\n  });\n  const {\n    absolute = false,\n    children,\n    className,\n    orientation = 'horizontal',\n    component = children || orientation === 'vertical' ? 'div' : 'hr',\n    flexItem = false,\n    light = false,\n    role = component !== 'hr' ? 'separator' : undefined,\n    textAlign = 'center',\n    variant = 'fullWidth',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    absolute,\n    component,\n    flexItem,\n    light,\n    orientation,\n    role,\n    textAlign,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DividerRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    role: role,\n    ref: ref,\n    ownerState: ownerState,\n    \"aria-orientation\": role === 'separator' && (component !== 'hr' || orientation === 'vertical') ? orientation : undefined,\n    ...other,\n    children: children ? /*#__PURE__*/_jsx(DividerWrapper, {\n      className: classes.wrapper,\n      ownerState: ownerState,\n      children: children\n    }) : null\n  });\n});\n\n/**\n * The following flag is used to ensure that this component isn't tabbable i.e.\n * does not get highlight/focus inside of MUI List.\n */\nif (Divider) {\n  Divider.muiSkipListHighlight = true;\n}\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Absolutely position the element.\n   * @default false\n   */\n  absolute: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   * @default false\n   */\n  flexItem: PropTypes.bool,\n  /**\n   * If `true`, the divider will have a lighter color.\n   * @default false\n   * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  light: PropTypes.bool,\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * @ignore\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The text alignment.\n   * @default 'center'\n   */\n  textAlign: PropTypes.oneOf(['center', 'left', 'right']),\n  /**\n   * The variant to use.\n   * @default 'fullWidth'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['fullWidth', 'inset', 'middle']), PropTypes.string])\n} : void 0;\nexport default Divider;","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * A hash table of hex numbers to avoid using toString() in uid() which is costly.\n * [ '00', '01', '02', ..., 'fe', 'ff' ]\n */\nconst HEX_NUMBERS = new Array( 256 ).fill( '' )\n\t.map( ( _, index ) => ( '0' + ( index ).toString( 16 ) ).slice( -2 ) );\n\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\nexport function uid(): string {\n\t// Generate 4 random 32-bit numbers.\n\tconst [ r1, r2, r3, r4 ] = crypto.getRandomValues( new Uint32Array( 4 ) );\n\n\t// Make sure that id does not start with number.\n\treturn 'e' +\n\t\tHEX_NUMBERS[ r1 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 24 & 0xFF ];\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nexport type SemanticVersion = `${ number }.${ number }.${ number }`;\n\n/**\n * Checks if the given string is a semantic version number.\n *\n * @param version - The string to check.\n * @returns `true` if the string is a semantic version, `false` otherwise.\n */\nexport function isSemanticVersion( version: string | undefined | null ): version is SemanticVersion {\n\treturn !!version && /^\\d+\\.\\d+\\.\\d+/.test( version );\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { isSemanticVersion, type SemanticVersion } from '../../utils/version/isSemanticVersion.js';\n\n/**\n * A version of the CKEditor that is used for testing purposes.\n */\nexport type CKCdnTestingVersion =\n\t| 'nightly'\n\t| 'alpha'\n\t| 'internal';\n\n/**\n * A version of a file on the CKEditor CDN.\n */\nexport type CKCdnVersion =\n\t| SemanticVersion\n\t| CKCdnTestingVersion;\n\n/**\n * Checks if the given string is a version of a file on the CKEditor CDN.\n *\n * @param version - The string to check.\n * @returns `true` if the string is a version of a file on the CKEditor CDN, `false` otherwise.\n * @example\n * ```ts\n * isCKCdnTestingVersion( '1.2.3-nightly-abc' ); // -> true\n * isCKCdnTestingVersion( '1.2.3-internal-abc' ); // -> true\n * isCKCdnTestingVersion( '1.2.3-alpha.1' ); // -> true\n * isCKCdnTestingVersion( '1.2.3' ); // -> false\n * isCKCdnTestingVersion( 'nightly' ); // -> true\n * ```\n */\nexport function isCKCdnTestingVersion( version: string | undefined ): version is CKCdnTestingVersion {\n\tif ( !version ) {\n\t\treturn false;\n\t}\n\n\treturn [ 'nightly', 'alpha', 'internal' ].some( testVersion => version.includes( testVersion ) );\n}\n\n/**\n * Checks if the given string is a version of a file on the CKEditor CDN.\n *\n * @param version - The string to check.\n * @returns `true` if the string is a version of a file on the CKEditor CDN, `false` otherwise.\n * @example\n * ```ts\n * isCKCdnVersion( 'nightly' ); // -> true\n * isCKCdnVersion( 'alpha' ); // -> true\n * isCKCdnVersion( 'rc-1.2.3' ); // -> true\n * isCKCdnVersion( '1.2.3' ); // -> true\n * ```\n */\nexport function isCKCdnVersion( version: string | undefined ): version is CKCdnVersion {\n\treturn isSemanticVersion( version ) || isCKCdnTestingVersion( version );\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { isSemanticVersion, type SemanticVersion } from './isSemanticVersion.js';\n\ntype DestructuredSemanticVersion = {\n\tmajor: number;\n\tminor: number;\n\tpatch: number;\n};\n\n/**\n * Destructure a semantic version string into its major, minor, and patch components.\n *\n * @param version - The semantic version string to destructure.\n * @returns An object containing the major, minor, and patch numbers.\n * @throws Will throw an error if the provided version is not a valid semantic version.\n */\nexport function destructureSemanticVersion( version: SemanticVersion ): DestructuredSemanticVersion {\n\tif ( !isSemanticVersion( version ) ) {\n\t\tthrow new Error( `Invalid semantic version: ${ version || '<blank>' }.` );\n\t}\n\n\tconst [ major, minor, patch ] = version.split( '.' );\n\n\treturn {\n\t\tmajor: Number.parseInt( major, 10 ),\n\t\tminor: Number.parseInt( minor, 10 ),\n\t\tpatch: Number.parseInt( patch, 10 )\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { type CKCdnVersion, isCKCdnTestingVersion } from '../cdn/ck/isCKCdnVersion.js';\nimport { destructureSemanticVersion } from '../utils/version/destructureSemanticVersion.js';\nimport type { LicenseKeyVersion } from './LicenseKey.js';\n\n/**\n * Returns the license version that is supported by the given CKEditor version.\n *\n * @param version The CKEditor version (semantic version or testing version).\n * @returns The supported license version.\n */\nexport function getLicenseVersionFromEditorVersion( version: CKCdnVersion ): LicenseKeyVersion {\n\t// Assume that the testing version is always the newest one\n\t// so we can return the highest supported license version.\n\tif ( isCKCdnTestingVersion( version ) ) {\n\t\treturn 3;\n\t}\n\n\tconst { major } = destructureSemanticVersion( version );\n\n\tswitch ( true ) {\n\t\tcase major >= 44:\n\t\t\treturn 3;\n\n\t\tcase major >= 38:\n\t\t\treturn 2;\n\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { BundleInstallationInfo } from './types.js';\n\nimport { isCKCdnVersion, type CKCdnVersion } from '../cdn/ck/isCKCdnVersion.js';\n\n/**\n * Returns information about the base CKEditor bundle installation.\n */\nexport function getCKBaseBundleInstallationInfo(): BundleInstallationInfo<CKCdnVersion> | null {\n\tconst { CKEDITOR_VERSION, CKEDITOR } = window;\n\n\tif ( !isCKCdnVersion( CKEDITOR_VERSION ) ) {\n\t\treturn null;\n\t}\n\n\t// Global `CKEDITOR` is set only in CDN builds.\n\treturn {\n\t\tsource: CKEDITOR ? 'cdn' : 'npm',\n\t\tversion: CKEDITOR_VERSION\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { getSupportedLicenseVersionInstallationInfo } from '../installation-info/getSupportedLicenseVersionInstallationInfo.js';\nimport { expectType } from '../types/expectType.js';\n\nimport type { LicenseKey, LicenseKeyVersion } from './LicenseKey.js';\n\n/**\n * Checks if passed license key is a free CKEditor license key.\n *\n * @param licenseKey The license key to check.\n * @param licenseVersion The version of the license key.\n * @returns `true` if the license key is free, `false` otherwise.\n */\nexport function isCKEditorFreeLicense( licenseKey: LicenseKey, licenseVersion?: LicenseKeyVersion ): boolean {\n\t// Pick the license version from the installation info if it's not provided.\n\t// Version should be present somewhere in the window object.\n\tlicenseVersion ||= getSupportedLicenseVersionInstallationInfo() || undefined;\n\n\tswitch ( licenseVersion ) {\n\t\tcase 1:\n\t\tcase 2:\n\t\t\treturn licenseKey === undefined;\n\n\t\tcase 3:\n\t\t\treturn licenseKey === 'GPL';\n\n\t\tdefault: {\n\t\t\texpectType<undefined>( licenseVersion );\n\n\t\t\treturn false;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { getLicenseVersionFromEditorVersion } from '../license/getLicenseVersionFromEditorVersion.js';\nimport type { LicenseKeyVersion } from '../license/LicenseKey.js';\n\nimport { getCKBaseBundleInstallationInfo } from './getCKBaseBundleInstallationInfo.js';\n\n/**\n * Returns information about the installed CKEditor version and the supported license version.\n *\n * @returns The supported license version or `null` if the CKEditor version is unknown.\n */\nexport function getSupportedLicenseVersionInstallationInfo(): LicenseKeyVersion | null {\n\tconst installationInfo = getCKBaseBundleInstallationInfo();\n\n\t// It looks like unknown version of Ckeditor is installed, so we can't determine the license version.\n\tif ( !installationInfo ) {\n\t\treturn null;\n\t}\n\n\treturn getLicenseVersionFromEditorVersion( installationInfo.version );\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { createDefer, once, type Defer } from '@ckeditor/ckeditor5-integrations-common';\n\n/**\n * This class is utilized to pause the initialization of an editor when another instance is already present on a specified element.\n * It is engineered to address the following issues:\n *\n *\t* Rapid changes in component properties often lead to the re-initialization of the editor, which can trigger\n *\t  the `editor-source-element-already-used` exception. This occurs because the editor is still in the process of initializing\n *\t  when the component decides to destroy it. This semaphore waits for the editor to fully initialize before destroying it, thereby\n *\t  allowing a new instance of the editor to be attached to the specified element.\n *\n *\t* Rapid mounting and unmounting in strict mode frequently results in the `editor-source-element-already-used` exception\n *\t  being thrown by the editor. This is due to React reusing the underlying DOM element during the mounting and unmounting of components\n *\t  (especially if the same component is being mounted and unmounted). Consequently, a race condition arises. The first render begins to\n *\t  attach the editor (in async mode), and shortly thereafter, it is destroyed and a new instance of the component is initialized.\n *\t  This semaphore, by utilizing a static semaphores promises map, retains information about whether the element is used by a previous\n *\t  instance of the editor and resumes execution when it is freed.\n *\n *\t* The process involves starting up many editors that are no longer needed and are immediately removed in the following rerenders.\n *\t  This can cause the editor’s initialization performance to slow down. The initialization of the editor is skipped when numerous\n *\t  rerenders occur within a short time-frame while using this semaphore. An example of this could be a situation with 4 rerenders\n *\t  occurring within a 10ms period. This semaphore will likely batch these calls, and instead of initializing 4 editors, only 2 will be\n *\t  initialized (the first and the last one).\n */\nexport class LifeCycleElementSemaphore<R> {\n\t/**\n\t * This is a map of elements associated with promises. It informs the semaphore that the underlying HTML element, used as a key,\n\t * is currently in use by another editor. Each element is assigned a promise, which allows for the easy chaining of new\n\t * editor instances on an element that is already in use by another instance. The process works as follows:\n\t *\n\t * \t1. If an element is being used by an editor, then the initialization of a new editor\n\t * \t   instance is chained using the `.then()` method of the Promise.\n\t *\n\t * \t2. If the editor associated with the underlying element is destroyed, then `Promise.resolve()` is called\n\t * \t   and the previously assigned `.then()` editor callback is executed.\n\t *\n\t *  @see {@link #lock} for more detailed information on the implementation.\n\t */\n\tprivate static readonly _semaphores = new Map<HTMLElement, Promise<void>>();\n\n\t/**\n\t * This should define async methods for initializing and destroying the editor.\n\t * Essentially, it's an async version of basic React lifecycle methods like `componentDidMount`, `componentWillUnmount`.\n\t *\n\t * \t* Result of {@link LifeCycleAsyncOperators#mount} method is passed to {@link LifeCycleAsyncOperators#unmount} as an argument.\n\t */\n\tprivate readonly _lifecycle: LifeCycleAsyncOperators<R>;\n\n\t/**\n\t * This is the element instance that the editor uses for mounting. This element should contain the `ckeditorInstance` member\n\t * once the editor has been successfully mounted to it. The semaphore ensures that a new instance of the editor, which will\n\t * be assigned to this element by the {@link #_lifecycle:mount} method, will always be initialized after the successful\n\t * destruction of the underlying `ckeditorInstance` that was previously mounted on this element.\n\t */\n\tprivate readonly _element: HTMLElement;\n\n\t/**\n\t * This is the lock mechanism utilized by the {@link #lock} and {@link #release} methods.\n\t *\n\t * \t* If the editor is not yet mounted and is awaiting mounting (for instance, when another editor is\n\t * \t  occupying the element), then it is null.\n\t *\n\t * \t* When the editor is mounted on the element, this variable holds an unresolved promise that will be\n\t * \t  resolved after the editor is destroyed.\n\t *\n\t * \t* Once the editor is destroyed (and it was previously mounted), the promise is resolved.\n\t */\n\tprivate _releaseLock: Defer<void> | null = null;\n\n\t/**\n\t * This is the result of the {@link #_lifecycle:mount} function. This value should be reset to `null`\n\t * once the semaphore is released. It is utilized to store certain data that must be removed following\n\t * the destruction of the editor. This data may include the editor's instance, the assigned watchdog,\n\t * or handles for additional window listeners.\n\t */\n\tprivate _value: R | null = null;\n\n\t/**\n\t * This is a list of callbacks that are triggered if the semaphore {@link #_lifecycle:mount} method executes successfully.\n\t * It is utilized in scenarios where we need to assign certain properties to an editor that is currently in the process of mounting.\n\t * An instance of such usage could be two-way binding. We aim to prevent the loss of all `setData` calls if the editor has not\n\t * yet been mounted, therefore these calls will be executed immediately following the completion of the mounting process.\n\t */\n\tprivate _afterMountCallbacks: Array<LifeCycleAfterMountCallback<R>> = [];\n\n\t/**\n\t * This represents the actual mounting state of the semaphore. It is primarily used by the {@link #release} method to\n\t * determine whether the initialization of the editor should be skipped or, if the editor is already initialized, the editor\n\t * should be destroyed.\n\t *\n\t * \t* If `destroyedBeforeInitialization` is true, then the {@link #release} method was invoked before the editor began to mount.\n\t * \t  This often occurs in strict mode when we assign a promise to the {@link LifeCycleEditorElementSemaphore#_semaphores} map\n\t * \t  and the assigned `mount` callback has not yet been called. In this scenario, it is safe to skip the initialization of the editor\n\t * \t  and simply release the semaphore.\n\t *\n\t *\t* If `mountingInProgress` is a Promise, then the {@link #release} method was invoked after the initialization of the editor and\n\t \t  the editor must be destroyed before the semaphore is released.\n\t*/\n\tprivate _state: LifeCycleState<R> = {\n\t\tdestroyedBeforeInitialization: false,\n\t\tmountingInProgress: null\n\t};\n\n\tconstructor( element: HTMLElement, lifecycle: LifeCycleAsyncOperators<R> ) {\n\t\tthis._element = element;\n\t\tthis._lifecycle = lifecycle;\n\t\tthis._lock();\n\t}\n\n\t/**\n\t * Getter for {@link #_value}.\n\t */\n\tpublic get value(): R | null {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Occasionally, the Watchdog restarts the editor instance, resulting in a new instance being assigned to the semaphore.\n\t * In terms of race conditions, it's generally safer to simply override the semaphore value rather than recreating it\n\t * with a different one.\n\t */\n\tpublic unsafeSetValue( value: R ): void {\n\t\tthis._value = value;\n\n\t\tthis._afterMountCallbacks.forEach( callback => callback( value ) );\n\t\tthis._afterMountCallbacks = [];\n\t}\n\n\t/**\n\t * This registers a callback that will be triggered after the editor has been successfully mounted.\n\t *\n\t * \t* If the editor is already mounted, the callback will be executed immediately.\n\t *\t* If the editor is in the process of mounting, the callback will be executed upon successful mounting.\n\t* \t* If the editor is never mounted, the passed callback will not be executed.\n\t* \t* If an exception is thrown within the callback, it will be re-thrown in the semaphore.\n\t*/\n\tpublic runAfterMount( callback: LifeCycleAfterMountCallback<R> ): void {\n\t\tconst { _value, _afterMountCallbacks } = this;\n\n\t\tif ( _value ) {\n\t\t\tcallback( _value );\n\t\t} else {\n\t\t\t_afterMountCallbacks.push( callback );\n\t\t}\n\t}\n\n\t/**\n\t * This method is used to inform other components that the {@link #_element} will be used by the editor,\n\t * which is initialized by the {@link #_lifecycle} methods.\n\t *\n\t * \t* If an editor is already present on the provided element, the initialization of the current one\n\t * \t  will be postponed until the previous one is destroyed.\n\t *\n\t * \t* If the element is empty and does not have an editor attached to it, the currently locked editor will\n\t * \t  be mounted immediately.\n\t *\n\t * After the successful initialization of the editor and the assignment of the {@link #_value} member,\n\t * the `onReady` lifecycle method is called.\n\t *\n\t * *Important note:*\n\t *\n\t * It’s really important to keep this method *sync*. If we make this method *async*, it won’t work well because\n\t * it will cause problems when we’re trying to set up the {@link LifeCycleEditorElementSemaphore#_semaphores} map entries.\n\t */\n\tprivate _lock(): void {\n\t\tconst { _semaphores } = LifeCycleElementSemaphore;\n\t\tconst { _state, _element, _lifecycle } = this;\n\n\t\t// This promise signifies that the previous editor is still attached to the current element.\n\t\t// Upon successful resolution, it will indicate that it is safe to assume that the element has\n\t\t// no assigned editor instance and can be reinitialized.\n\t\tconst prevElementSemaphore = _semaphores.get( _element ) || Promise.resolve( null );\n\n\t\t// This is a lock that will be resolved after the `release` method is called. Due to this lock,\n\t\t// the promise will never be resolved until the editor is destroyed.\n\t\tconst releaseLock = createDefer();\n\t\tthis._releaseLock = releaseLock;\n\n\t\t// This is the initialization of the editor that occurs after the previous editor has been detached from the specified element.\n\t\t//\n\t\t// If the `release` method was called before the initialization of the current editor instance, then it will be skipped.\n\t\t// This situation occurs quite frequently when we have three or more rerenders in a row, and it doesn't make sense to initialize\n\t\t// the second editor because it will be overridden anyway by the third one.\n\t\tconst newElementSemaphore = prevElementSemaphore\n\t\t\t.then( () => {\n\t\t\t\tif ( _state.destroyedBeforeInitialization ) {\n\t\t\t\t\treturn Promise.resolve( undefined );\n\t\t\t\t}\n\n\t\t\t\t// This variable will be used later in the `release` method to determine\n\t\t\t\t// whether the editor is being destroyed prior to initialization.\n\t\t\t\t_state.mountingInProgress = _lifecycle.mount().then( mountResult => {\n\t\t\t\t\tif ( mountResult ) {\n\t\t\t\t\t\tthis.unsafeSetValue( mountResult );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn mountResult;\n\t\t\t\t} );\n\n\t\t\t\treturn _state.mountingInProgress;\n\t\t\t} )\n\t\t\t.then( async mountResult => {\n\t\t\t\t// Everything is fine, all ready callback might be fired here.\n\t\t\t\tif ( mountResult && _lifecycle.afterMount ) {\n\t\t\t\t\tawait _lifecycle.afterMount( {\n\t\t\t\t\t\telement: _element,\n\t\t\t\t\t\tmountResult\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} )\n\n\t\t\t// It will be released after destroying of editor by the {@link #_release method}.\n\t\t\t.then( () => releaseLock.promise )\n\n\t\t\t// Prevent hanging of semaphore during mount, just assume that everything is fine\n\t\t\t.catch( error => {\n\t\t\t\tconsole.error( 'Semaphore mounting error:', error );\n\t\t\t} )\n\n\t\t\t// Remove semaphore from map if released.\n\t\t\t.then( () => {\n\t\t\t\tif ( _semaphores.get( _element ) === newElementSemaphore ) {\n\t\t\t\t\t_semaphores.delete( _element );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t_semaphores.set( _element, newElementSemaphore );\n\t}\n\n\t/**\n\t * Inverse of {@link #_lock} method that tries to destroy attached editor.\n\t *\n\t * \t* If editor is being already attached to element (or is in attaching process) then after fully initialization of editor\n\t * \t  destroy is performed and semaphore is released. The {@link #_lifecycle} unmount method is called.\n\t *\n\t * \t* If editor is being destroyed before initialization then it does nothing but sets `destroyedBeforeInitialization` flag that\n\t * \t  will be later checked by {@link #_lock} method in initialization. The {@link #_lifecycle} unmount method is not called.\n\t *\n\t * *Important note:*\n\t *\n\t * It’s really important to keep this method *sync*. If we make this method *async*, it won’t work well because\n\t * it will cause problems when we’re trying to set up the {@link LifeCycleEditorElementSemaphore#_semaphores} map entries.\n\t */\n\tpublic readonly release = once( () => {\n\t\tconst { _releaseLock, _state, _element, _lifecycle } = this;\n\n\t\tif ( _state.mountingInProgress ) {\n\t\t\t_state.mountingInProgress\n\t\t\t\t.then( () => _lifecycle.unmount( {\n\t\t\t\t\telement: _element,\n\n\t\t\t\t\t// Mount result might be overridden by watchdog during restart so use instance variable.\n\t\t\t\t\tmountResult: this.value!\n\t\t\t\t} ) )\n\n\t\t\t\t// Prevent hanging of semaphore during unmount, just assume that everything is fine\n\t\t\t\t.catch( error => {\n\t\t\t\t\tconsole.error( 'Semaphore unmounting error:', error );\n\t\t\t\t} )\n\n\t\t\t\t.then( _releaseLock!.resolve )\n\t\t\t\t.then( () => {\n\t\t\t\t\tthis._value = null;\n\t\t\t\t} );\n\t\t} else {\n\t\t\t_state.destroyedBeforeInitialization = true;\n\t\t\t_releaseLock!.resolve();\n\t\t}\n\t} );\n}\n\nexport type LifeCycleAfterMountCallback<R> = ( mountResult: R ) => void;\n\ntype LifeCycleState<R> = {\n\tdestroyedBeforeInitialization: boolean;\n\tmountingInProgress: Promise<R> | null;\n};\n\ntype LifeCyclePostMountAttrs<R> = {\n\telement: HTMLElement;\n\tmountResult: R;\n};\n\nexport type LifeCycleAsyncOperators<R> = {\n\tmount: () => Promise<R>;\n\tafterMount?: ( result: LifeCyclePostMountAttrs<R> ) => Promise<void> | void;\n\tunmount: ( result: LifeCyclePostMountAttrs<R> ) => Promise<void>;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Ensures that passed function will be executed only once.\n */\nexport function once<A extends Array<any>, R = void>( fn: ( ...args: A ) => R ): ( ...args: A ) => R {\n\tlet lastResult: { current: R } | null = null;\n\n\treturn ( ...args: A ): R => {\n\t\tif ( !lastResult ) {\n\t\t\tlastResult = {\n\t\t\t\tcurrent: fn( ...args )\n\t\t\t};\n\t\t}\n\n\t\treturn lastResult.current;\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nexport type Defer<E> = {\n\tpromise: Promise<E>;\n\tresolve: ( value: E ) => void;\n};\n\n/**\n * This function generates a promise that can be resolved by invoking the returned `resolve` method.\n * It proves to be beneficial in the creation of various types of locks and semaphores.\n *\n * It can be replaced with `Promise.withResolvers()` in the future.\n */\nexport function createDefer<E = void>(): Defer<E> {\n\tconst deferred: Defer<E> = {\n\t\tresolve: null as any,\n\t\tpromise: null as any\n\t};\n\n\tdeferred.promise = new Promise<E>( resolve => {\n\t\tdeferred.resolve = resolve;\n\t} );\n\n\treturn deferred;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { Config, EditorConfig } from 'ckeditor5';\n\n/**\n * The symbol cannot be used as a key because config getters require strings as keys.\n */\nconst ReactContextMetadataKey = '$__CKEditorReactContextMetadata';\n\n/**\n * Sets the metadata in the object.\n *\n * @param metadata The metadata to set.\n * @param object The object to set the metadata in.\n * @returns The object with the metadata set.\n */\nexport function withCKEditorReactContextMetadata(\n\tmetadata: CKEditorConfigContextMetadata,\n\tconfig: EditorConfig\n): EditorConfig & { [ ReactContextMetadataKey ]: CKEditorConfigContextMetadata } {\n\treturn {\n\t\t...config,\n\t\t[ ReactContextMetadataKey ]: metadata\n\t};\n}\n\n/**\n * Tries to extract the metadata from the object.\n *\n * @param object The object to extract the metadata from.\n */\nexport function tryExtractCKEditorReactContextMetadata( object: Config<any> ): CKEditorConfigContextMetadata | null {\n\treturn object.get( ReactContextMetadataKey );\n}\n\n/**\n * The metadata that is stored in the React context.\n */\nexport type CKEditorConfigContextMetadata = {\n\n\t/**\n\t * The name of the editor in the React context. It'll be later used in the `useInitializedCKEditorsMap` hook\n\t * to track the editor initialization and destruction events.\n\t */\n\tname?: string;\n\n\t/**\n\t * Any additional metadata that can be stored in the context.\n\t */\n\t[x: string | number | symbol]: unknown;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { useEffect, useRef, type MutableRefObject } from 'react';\n\n/**\n * Custom hook that returns a mutable ref object indicating whether the component is mounted or not.\n *\n * @returns The mutable ref object.\n */\nexport const useIsMountedRef = (): MutableRefObject<boolean> => {\n\tconst mountedRef = useRef<boolean>( false );\n\n\tuseEffect( () => {\n\t\tmountedRef.current = true;\n\n\t\treturn () => {\n\t\t\tmountedRef.current = false;\n\t\t};\n\t}, [] );\n\n\treturn mountedRef;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport React, {\n\tuseRef, useContext, useState, useEffect,\n\ttype PropsWithChildren,\n\ttype ReactElement\n} from 'react';\n\nimport { uid } from '@ckeditor/ckeditor5-integrations-common';\nimport { useIsMountedRef } from '../hooks/useIsMountedRef.js';\nimport {\n\tuseInitializedCKEditorsMap,\n\ttype InitializedContextEditorsConfig\n} from './useInitializedCKEditorsMap.js';\n\nimport type {\n\tContextWatchdog,\n\tWatchdogConfig,\n\tContext,\n\tContextConfig\n} from 'ckeditor5';\n\nexport const ContextWatchdogContext = React.createContext<ContextWatchdogValue | null>( null );\n\n/**\n * Custom hook that returns the CKEditor Watchdog context value.\n */\nexport const useCKEditorWatchdogContext = (): ContextWatchdogValue | null =>\n\tuseContext( ContextWatchdogContext );\n\n/**\n * A React component that provides a context for CKEditor.\n */\nconst CKEditorContext = <TContext extends Context = Context>( props: Props<TContext> ): ReactElement | null => {\n\tconst {\n\t\tid, context, watchdogConfig,\n\t\tchildren, config, onReady,\n\t\tcontextWatchdog: ContextWatchdogConstructor,\n\t\tisLayoutReady = true,\n\t\tonChangeInitializedEditors,\n\t\tonError = ( error, details ) => console.error( error, details )\n\t} = props;\n\n\tconst isMountedRef = useIsMountedRef();\n\tconst prevWatchdogInitializationIDRef = useRef<string | null>( null );\n\n\t// The currentContextWatchdog state is set to 'initializing' because it is checked later in the CKEditor component\n\t// which is waiting for the full initialization of the context watchdog.\n\tconst [ currentContextWatchdog, setCurrentContextWatchdog ] = useState<ContextWatchdogValue<TContext>>( {\n\t\tstatus: 'initializing'\n\t} );\n\n\t// Lets initialize the context watchdog when the layout is ready.\n\tuseEffect( () => {\n\t\tif ( isLayoutReady ) {\n\t\t\tinitializeContextWatchdog();\n\t\t} else {\n\t\t\tsetCurrentContextWatchdog( {\n\t\t\t\tstatus: 'initializing'\n\t\t\t} );\n\t\t}\n\t}, [ id, isLayoutReady ] );\n\n\t// Cleanup the context watchdog when the component is unmounted. Abort if the watchdog is not initialized.\n\tuseEffect( () => () => {\n\t\tif ( currentContextWatchdog.status === 'initialized' ) {\n\t\t\tcurrentContextWatchdog.watchdog.destroy();\n\t\t}\n\t}, [ currentContextWatchdog ] );\n\n\t// Listen for the editor initialization and destruction events and call the onChangeInitializedEditors function.\n\tuseInitializedCKEditorsMap( {\n\t\tcurrentContextWatchdog,\n\t\tonChangeInitializedEditors\n\t} );\n\n\t/**\n\t * Regenerates the initialization ID by generating a random ID and updating the previous watchdog initialization ID.\n\t * This is necessary to ensure that the state update is performed only if the current initialization ID matches the previous one.\n\t * This helps to avoid race conditions and ensures that the correct context watchdog is associated with the component.\n\t *\n\t * @returns The regenerated initialization ID.\n\t */\n\tfunction regenerateInitializationID() {\n\t\tprevWatchdogInitializationIDRef.current = uid();\n\n\t\treturn prevWatchdogInitializationIDRef.current;\n\t}\n\n\t/**\n\t * Checks if the state can be updated based on the provided initialization ID.\n\t *\n\t * @param initializationID The initialization ID to compare with the previous one.\n\t * @returns A boolean indicating whether the state can be updated.\n\t */\n\tfunction canUpdateState( initializationID: string ) {\n\t\treturn prevWatchdogInitializationIDRef.current === initializationID && isMountedRef.current;\n\t}\n\n\t/**\n\t * Initializes the context watchdog.\n\t *\n\t * @returns Watchdog instance.\n\t */\n\tfunction initializeContextWatchdog() {\n\t\t// The prevWatchdogInitializationID variable is used to keep track of the previous initialization ID.\n\t\t// It is used to ensure that the state update is performed only if the current initialization ID matches the previous one.\n\t\t// This helps to avoid race conditions and ensures that the correct context watchdog is associated with the component.\n\t\tconst watchdogInitializationID = regenerateInitializationID()!;\n\t\tconst contextWatchdog = new ContextWatchdogConstructor( context!, watchdogConfig );\n\n\t\t// Handle error event from context watchdog.\n\t\tcontextWatchdog.on( 'error', ( _, errorEvent ) => {\n\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\tif ( canUpdateState( watchdogInitializationID ) ) {\n\t\t\t\tonError( errorEvent.error, {\n\t\t\t\t\tphase: 'runtime',\n\t\t\t\t\twillContextRestart: errorEvent.causesRestart\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle state change event from context watchdog.\n\t\tcontextWatchdog.on( 'stateChange', () => {\n\t\t\tif ( onReady && contextWatchdog.state === 'ready' && canUpdateState( watchdogInitializationID ) ) {\n\t\t\t\tonReady(\n\t\t\t\t\tcontextWatchdog.context! as TContext,\n\t\t\t\t\tcontextWatchdog\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t\t// Create the context watchdog and initialize it with the provided config.\n\t\tcontextWatchdog\n\t\t\t.create( config )\n\t\t\t.then( () => {\n\t\t\t\t// Check if the state update is still valid and update the current context watchdog.\n\t\t\t\tif ( canUpdateState( watchdogInitializationID ) ) {\n\t\t\t\t\tsetCurrentContextWatchdog( {\n\t\t\t\t\t\tstatus: 'initialized',\n\t\t\t\t\t\twatchdog: contextWatchdog\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t// Destroy the context watchdog if the state update is no longer valid.\n\t\t\t\t\tcontextWatchdog.destroy();\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.catch( error => {\n\t\t\t\t// Update the current context watchdog with the error status.\n\t\t\t\tif ( canUpdateState( watchdogInitializationID ) ) {\n\t\t\t\t\t// Handle error during context watchdog initialization.\n\t\t\t\t\tonError( error, {\n\t\t\t\t\t\tphase: 'initialization',\n\t\t\t\t\t\twillContextRestart: false\n\t\t\t\t\t} );\n\n\t\t\t\t\tsetCurrentContextWatchdog( {\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\terror\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\n\t\treturn contextWatchdog;\n\t}\n\n\treturn (\n\t\t<ContextWatchdogContext.Provider value={currentContextWatchdog}>\n\t\t\t{children}\n\t\t</ContextWatchdogContext.Provider>\n\t);\n};\n\n/**\n * Checks if the given object is of type ContextWatchdogValue.\n *\n * @param obj The object to be checked.\n * @returns True if the object is of type ContextWatchdogValue, false otherwise.\n */\nexport const isContextWatchdogValue = ( obj: any ): obj is ContextWatchdogValue =>\n\t!!obj && typeof obj === 'object' && 'status' in obj && [ 'initializing', 'initialized', 'error' ].includes( obj.status );\n\n/**\n * Checks if the provided object is a context watchdog value with the specified status.\n */\nexport const isContextWatchdogValueWithStatus = <S extends ContextWatchdogValueStatus>( status: S ) =>\n\t( obj: any ): obj is ExtractContextWatchdogValueByStatus<S> =>\n\t\tisContextWatchdogValue( obj ) && obj.status === status;\n\n/**\n * Checks if the context watchdog is currently initializing.\n */\nexport const isContextWatchdogInitializing = isContextWatchdogValueWithStatus( 'initializing' );\n\n/**\n * Checks if the provided object is a fully initialized context watchdog value. It prevents race conditions between\n * watchdog state that is not fully synchronized with the context state. For example, the watchdog state can be 'destroyed'\n * while the context is still being initialized because context setState is pending.\n */\nexport const isContextWatchdogReadyToUse = ( obj: any ): obj is ExtractContextWatchdogValueByStatus<'initialized'> => (\n\tisContextWatchdogValueWithStatus( 'initialized' )( obj ) &&\n\tobj.watchdog.state === 'ready'\n);\n\n/**\n * Represents the value of the ContextWatchdog in the CKEditor context.\n */\nexport type ContextWatchdogValue<TContext extends Context = Context> =\n\t| {\n\t\tstatus: 'initializing';\n\t}\n\t| {\n\t\tstatus: 'initialized';\n\t\twatchdog: ContextWatchdog<TContext>;\n\t}\n\t| {\n\t\tstatus: 'error';\n\t\terror: ErrorDetails;\n\t};\n\n/**\n * Represents the status of the ContextWatchdogValue.\n */\nexport type ContextWatchdogValueStatus = ContextWatchdogValue[ 'status' ];\n\n/**\n * Extracts a specific type of `ContextWatchdogValue` based on its status.\n */\nexport type ExtractContextWatchdogValueByStatus<S extends ContextWatchdogValueStatus> = Extract<\n\tContextWatchdogValue,\n\t{ status: S }\n>;\n\n/**\n * Props for the CKEditorContext component.\n */\nexport type Props<TContext extends Context> =\n\t& PropsWithChildren\n\t& Pick<InitializedContextEditorsConfig<TContext>, 'onChangeInitializedEditors'>\n\t& {\n\t\tid?: string;\n\t\tisLayoutReady?: boolean;\n\t\tcontext?: { create( ...args: any ): Promise<TContext> };\n\t\tcontextWatchdog: typeof ContextWatchdog<TContext>;\n\t\twatchdogConfig?: WatchdogConfig;\n\t\tconfig?: ContextConfig;\n\t\tonReady?: ( context: TContext, watchdog: ContextWatchdog<TContext> ) => void;\n\t\tonError?: ( error: Error, details: ErrorDetails ) => void;\n\t};\n\ntype ErrorDetails = {\n\tphase: 'initialization' | 'runtime';\n\twillContextRestart: boolean;\n};\n\nexport default CKEditorContext;\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport React from 'react';\nimport { createIntegrationUsageDataPlugin } from '@ckeditor/ckeditor5-integrations-common';\n\n/**\n * This part of the code is not executed in open-source implementations using a GPL key.\n * It only runs when a specific license key is provided. If you are uncertain whether\n * this applies to your installation, please contact our support team.\n */\nexport const ReactIntegrationUsageDataPlugin = createIntegrationUsageDataPlugin(\n\t'react',\n\t{\n\t\tversion: __REACT_INTEGRATION_VERSION__,\n\t\tframeworkVersion: React.version\n\t}\n);\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { Editor, PluginConstructor } from 'ckeditor5';\nimport { isCKEditorFreeLicense } from '../license/isCKEditorFreeLicense.js';\n\n/**\n * Creates a plugin that collects usage data for a specific integration.\n *\n * This part of the code is not executed in open-source implementations using a GPL key.\n * It only runs when a specific license key is provided. If you are uncertain whether\n * this applies to your installation, please contact our support team.\n *\n * @param integrationName The name of the integration.\n * @param usageData The usage data for the integration.\n * @returns The plugin that collects the usage data.\n * @example\n * ```ts\n * import { createUsageDataPlugin } from './usage-data.plugin';\n *\n * const integrationUsageDataPlugin = createUsageDataPlugin( 'react', {\n * \tversion: '1.0.0',\n * \tframeworkVersion: '17.0.0'\n * } );\n *\n * const editor = ClassicEditor.create( document.querySelector( '#editor' ), {\n * \tplugins: [ integrationUsageDataPlugin ]\n * } );\n * ```\n */\nexport function createIntegrationUsageDataPlugin(\n\tintegrationName: string,\n\tusageData: IntegrationUsageData\n): IntegrationUsageDataPlugin {\n\treturn function IntegrationUsageDataPlugin( editor: Editor ) {\n\t\t/**\n\t\t * Do not collect usage data for integrations when using a free CKEditor license.\n\t\t */\n\t\tif ( isCKEditorFreeLicense( editor.config.get( 'licenseKey' ) ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.on<IntegrationCollectUsageDataEvent>( 'collectUsageData', ( source, { setUsageData } ) => {\n\t\t\tsetUsageData( `integration.${ integrationName }`, usageData );\n\t\t} );\n\t} satisfies PluginConstructor;\n}\n\n/**\n * The plugin collects usage data for an integration.\n */\nexport type IntegrationUsageDataPlugin = ( editor: Editor ) => void;\n\n/**\n * The usage data for an integration.\n */\ntype IntegrationUsageData = {\n\n\t/**\n\t * The version of the integration.\n\t */\n\tversion: string;\n\n\t/**\n\t * The version of the framework that the integration is using.\n\t */\n\tframeworkVersion?: string;\n};\n\n/**\n * The event fires when the editor collects usage data for integrations.\n * The editor should fire it after the `ready` event so the integrations can provide their usage data.\n */\ntype IntegrationCollectUsageDataEvent = {\n\tname: 'collectUsageData';\n\targs: [\n\t\t{\n\t\t\tsetUsageData( path: `integration.${ string }`, value: IntegrationUsageData ): void;\n\t\t}\n\t];\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { appendExtraPluginsToEditorConfig, isCKEditorFreeLicense } from '@ckeditor/ckeditor5-integrations-common';\nimport type { EditorConfig } from 'ckeditor5';\n\nimport { ReactIntegrationUsageDataPlugin } from './ReactIntegrationUsageDataPlugin.js';\n\n/**\n * Appends all integration plugins to the editor configuration.\n *\n * @param editorConfig The editor configuration.\n * @returns The editor configuration with all integration plugins appended.\n */\nexport function appendAllIntegrationPluginsToConfig( editorConfig: EditorConfig ): EditorConfig {\n\t/**\n\t * Do not modify the editor configuration if the editor is using a free license.\n\t */\n\tif ( isCKEditorFreeLicense( editorConfig.licenseKey ) ) {\n\t\treturn editorConfig;\n\t}\n\n\treturn appendExtraPluginsToEditorConfig( editorConfig, [\n\t\t/**\n\t\t * This part of the code is not executed in open-source implementations using a GPL key.\n\t\t * It only runs when a specific license key is provided. If you are uncertain whether\n\t\t * this applies to your installation, please contact our support team.\n\t\t */\n\t\tReactIntegrationUsageDataPlugin\n\t] );\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { EditorConfig, PluginConstructor } from 'ckeditor5';\n\n/**\n * Appends plugins to the editor configuration.\n * It uses the `extraPlugins` property to append the plugins to avoid dealing with built-in constructor plugins.\n *\n * @param config The editor configuration.\n * @param plugins The plugins to append.\n * @returns The editor configuration with the plugins appended.\n * @example\n * ```ts\n * const editorConfig = appendExtraPluginsToEditorConfig(\n * \t{\n * \t\textraPlugins: [ 'Plugin1' ]\n * \t},\n * \t[ 'Plugin2' ]\n * );\n *\n * console.log( editorConfig.extraPlugins ); // [ 'Plugin1', 'Plugin2' ]\n * ```\n */\nexport function appendExtraPluginsToEditorConfig(\n\tconfig: EditorConfig,\n\tplugins: Array<PluginConstructor>\n): EditorConfig {\n\tconst extraPlugins = config.extraPlugins || [];\n\n\t// Do not use `uniq`. There might be integrations with duplicated plugins, so to\n\t// make it backward compatible, we need to keep the order of the plugins.\n\treturn {\n\t\t...config,\n\t\textraPlugins: [\n\t\t\t...extraPlugins,\n\t\t\t...plugins.filter( item => !extraPlugins.includes( item ) )\n\t\t]\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window */\n\nimport React from 'react';\nimport PropTypes, { type InferProps, type Validator } from 'prop-types';\n\nimport type {\n\tEventInfo,\n\tEditor,\n\tEditorConfig,\n\tDocumentChangeEvent,\n\tEditorWatchdog,\n\tContextWatchdog,\n\tWatchdogConfig,\n\tEditorCreatorFunction\n} from 'ckeditor5';\n\nimport type { EditorSemaphoreMountResult } from './lifecycle/LifeCycleEditorSemaphore.js';\n\nimport { uid } from '@ckeditor/ckeditor5-integrations-common';\nimport { LifeCycleElementSemaphore } from './lifecycle/LifeCycleElementSemaphore.js';\n\nimport {\n\twithCKEditorReactContextMetadata,\n\ttype CKEditorConfigContextMetadata\n} from './context/setCKEditorReactContextMetadata.js';\n\nimport {\n\tContextWatchdogContext,\n\tisContextWatchdogInitializing,\n\tisContextWatchdogReadyToUse\n} from './context/ckeditorcontext.js';\n\nimport { appendAllIntegrationPluginsToConfig } from './plugins/appendAllIntegrationPluginsToConfig.js';\n\nconst REACT_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from React integration (@ckeditor/ckeditor5-react)';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default class CKEditor<TEditor extends Editor> extends React.Component<Props<TEditor>> {\n\t/**\n\t * After mounting the editor, the variable will contain a reference to the created editor.\n\t * @see: https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n\t */\n\tprivate domContainer = React.createRef<HTMLDivElement>();\n\n\t/**\n\t * Unlocks element in editor semaphore after destroy editor instance.\n\t */\n\tprivate editorSemaphore: LifeCycleElementSemaphore<EditorSemaphoreMountResult<TEditor>> | null = null;\n\n\tconstructor( props: Props<TEditor> ) {\n\t\tsuper( props );\n\n\t\tthis._checkVersion();\n\t}\n\n\t/**\n\t * Checks if the CKEditor version used in the application is compatible with the component.\n\t */\n\tprivate _checkVersion(): void {\n\t\tconst { CKEDITOR_VERSION } = window;\n\n\t\tif ( !CKEDITOR_VERSION ) {\n\t\t\treturn console.warn( 'Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.' );\n\t\t}\n\n\t\tconst [ major ] = CKEDITOR_VERSION.split( '.' ).map( Number );\n\n\t\tif ( major >= 42 || CKEDITOR_VERSION.startsWith( '0.0.0' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.warn( 'The <CKEditor> component requires using CKEditor 5 in version 42+ or nightly build.' );\n\t}\n\n\tprivate get _semaphoreValue(): EditorSemaphoreMountResult<TEditor> | null {\n\t\tconst { editorSemaphore } = this;\n\n\t\treturn editorSemaphore ? editorSemaphore.value : null;\n\t}\n\n\t/**\n\t * An watchdog instance.\n\t */\n\tpublic get watchdog(): EditorWatchdog<TEditor> | EditorWatchdogAdapter<TEditor> | null {\n\t\tconst { _semaphoreValue } = this;\n\n\t\treturn _semaphoreValue ? _semaphoreValue.watchdog : null;\n\t}\n\n\t/**\n\t * An editor instance.\n\t */\n\tpublic get editor(): Editor | null {\n\t\tconst { _semaphoreValue } = this;\n\n\t\treturn _semaphoreValue ? _semaphoreValue.instance : null;\n\t}\n\n\t/**\n\t * The CKEditor component should not be updated by React itself.\n\t * However, if the component identifier changes, the whole structure should be created once again.\n\t */\n\tpublic override shouldComponentUpdate( nextProps: Readonly<Props<TEditor>> ): boolean {\n\t\tconst { props, editorSemaphore } = this;\n\n\t\t// Only when the component identifier changes the whole structure should be re-created once again.\n\t\tif ( nextProps.id !== props.id ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( nextProps.disableWatchdog !== props.disableWatchdog ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( editorSemaphore ) {\n\t\t\teditorSemaphore.runAfterMount( ( { instance } ) => {\n\t\t\t\tif ( this._shouldUpdateEditorData( props, nextProps, instance ) ) {\n\t\t\t\t\tinstance.data.set( nextProps.data! );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( 'disabled' in nextProps ) {\n\t\t\t\teditorSemaphore.runAfterMount( ( { instance } ) => {\n\t\t\t\t\tif ( nextProps.disabled ) {\n\t\t\t\t\t\tinstance.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstance.disableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Initialize the editor when the component is mounted.\n\t */\n\tpublic override componentDidMount(): void {\n\t\tif ( !isContextWatchdogInitializing( this.context ) ) {\n\t\t\tthis._initLifeCycleSemaphore();\n\t\t}\n\t}\n\n\t/**\n\t * Re-render the entire component once again. The old editor will be destroyed and the new one will be created.\n\t */\n\tpublic override componentDidUpdate(): void {\n\t\tif ( !isContextWatchdogInitializing( this.context ) ) {\n\t\t\tthis._initLifeCycleSemaphore();\n\t\t}\n\t}\n\n\t/**\n\t * Destroy the editor before unmounting the component.\n\t */\n\tpublic override componentWillUnmount(): void {\n\t\tthis._unlockLifeCycleSemaphore();\n\t}\n\n\t/**\n\t * Async destroy attached editor and unlock element semaphore.\n\t */\n\tprivate _unlockLifeCycleSemaphore() {\n\t\tif ( this.editorSemaphore ) {\n\t\t\tthis.editorSemaphore.release();\n\t\t\tthis.editorSemaphore = null;\n\t\t}\n\t}\n\n\t/**\n\t * Unlocks previous editor semaphore and creates new one..\n\t */\n\tprivate _initLifeCycleSemaphore() {\n\t\tthis._unlockLifeCycleSemaphore();\n\t\tthis.editorSemaphore = new LifeCycleElementSemaphore( this.domContainer.current!, {\n\t\t\tmount: async () => this._initializeEditor(),\n\t\t\tafterMount: ( { mountResult } ) => {\n\t\t\t\tconst { onReady } = this.props;\n\n\t\t\t\tif ( onReady && this.domContainer.current !== null ) {\n\t\t\t\t\tonReady( mountResult.instance );\n\t\t\t\t}\n\t\t\t},\n\t\t\tunmount: async ( { element, mountResult } ) => {\n\t\t\t\tconst { onAfterDestroy } = this.props;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._destroyEditor( mountResult );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Make sure that nothing left in actual editor element. There can be custom integrations that\n\t\t\t\t\t * appends something to container. Let's reset element every update cycle before mounting another\n\t\t\t\t\t * editor instance.\n\t\t\t\t\t */\n\t\t\t\t\telement.innerHTML = '';\n\t\t\t\t} finally {\n\t\t\t\t\t/**\n\t\t\t\t\t * Broadcast information about destroying current instance. It is useful for removing duplicated\n\t\t\t\t\t * toolbars in decoupled editor mode.\n\t\t\t\t\t */\n\t\t\t\t\tif ( onAfterDestroy ) {\n\t\t\t\t\t\tonAfterDestroy( mountResult.instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Render a <div> element which will be replaced by CKEditor.\n\t */\n\tpublic override render(): React.ReactNode {\n\t\treturn (\n\t\t\t<div ref={ this.domContainer }></div>\n\t\t);\n\t}\n\n\t/**\n\t * Initializes the editor by creating a proper watchdog and initializing it with the editor's configuration.\n\t */\n\tprivate async _initializeEditor(): Promise<EditorSemaphoreMountResult<TEditor>> {\n\t\tif ( this.props.disableWatchdog ) {\n\t\t\tconst instance = await this._createEditor( this.domContainer.current!, this._getConfig() );\n\n\t\t\treturn {\n\t\t\t\tinstance: instance as TEditor,\n\t\t\t\twatchdog: null\n\t\t\t};\n\t\t}\n\n\t\tconst watchdog = ( () => {\n\t\t\t// There is small delay where React did not update the context yet but watchdog is already destroyed.\n\t\t\t// However editor should be created again in such case, after receiving new context.\n\t\t\tif ( isContextWatchdogReadyToUse( this.context ) ) {\n\t\t\t\treturn new EditorWatchdogAdapter( this.context.watchdog );\n\t\t\t}\n\n\t\t\treturn new this.props.editor.EditorWatchdog( this.props.editor, this.props.watchdogConfig );\n\t\t} )() as EditorWatchdogAdapter<TEditor>;\n\n\t\tconst totalRestartsRef = {\n\t\t\tcurrent: 0\n\t\t};\n\n\t\twatchdog.setCreator( async ( el, config ) => {\n\t\t\tconst { editorSemaphore } = this;\n\t\t\tconst { onAfterDestroy } = this.props;\n\n\t\t\tif ( totalRestartsRef.current > 0 && onAfterDestroy && editorSemaphore?.value?.instance ) {\n\t\t\t\tonAfterDestroy( editorSemaphore.value.instance );\n\t\t\t}\n\n\t\t\tconst instance = await this._createEditor( el as any, config );\n\n\t\t\t// The editor semaphore can be unavailable at this stage. There is a small chance that the component\n\t\t\t// was destroyed while watchdog was initializing new instance of editor. In such case, we should not\n\t\t\t// call any callbacks or set any values to the semaphore.\n\t\t\tif ( editorSemaphore && totalRestartsRef.current > 0 ) {\n\t\t\t\teditorSemaphore.unsafeSetValue( {\n\t\t\t\t\tinstance,\n\t\t\t\t\twatchdog\n\t\t\t\t} );\n\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\tif ( this.props.onReady ) {\n\t\t\t\t\t\tthis.props.onReady( watchdog!.editor as TEditor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\ttotalRestartsRef.current++;\n\t\t\treturn instance;\n\t\t} );\n\n\t\twatchdog.on( 'error', ( _, { error, causesRestart } ) => {\n\t\t\tconst onError = this.props.onError || console.error;\n\t\t\tonError( error, { phase: 'runtime', willEditorRestart: causesRestart } );\n\t\t} );\n\n\t\tawait watchdog\n\t\t\t.create( this.domContainer.current!, this._getConfig() )\n\t\t\t.catch( error => {\n\t\t\t\tconst onError = this.props.onError || console.error;\n\t\t\t\tonError( error, { phase: 'initialization', willEditorRestart: false } );\n\t\t\t} );\n\n\t\treturn {\n\t\t\twatchdog,\n\t\t\tinstance: watchdog!.editor\n\t\t};\n\t}\n\n\t/**\n\t * Creates an editor from the element and configuration.\n\t *\n\t * @param element The source element.\n\t * @param config CKEditor 5 editor configuration.\n\t */\n\tprivate _createEditor( element: HTMLElement | string | Record<string, string>, config: EditorConfig ): Promise<TEditor> {\n\t\tconst { contextItemMetadata } = this.props;\n\n\t\tif ( contextItemMetadata ) {\n\t\t\tconfig = withCKEditorReactContextMetadata( contextItemMetadata, config );\n\t\t}\n\n\t\treturn this.props.editor.create(\n\t\t\telement as HTMLElement,\n\t\t\tappendAllIntegrationPluginsToConfig( config )\n\t\t)\n\t\t\t.then( editor => {\n\t\t\t\tif ( 'disabled' in this.props ) {\n\t\t\t\t\t// Switch to the read-only mode if the `[disabled]` attribute is specified.\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( this.props.disabled ) {\n\t\t\t\t\t\teditor.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst modelDocument = editor.model.document;\n\t\t\t\tconst viewDocument = editor.editing.view.document;\n\n\t\t\t\tmodelDocument.on<DocumentChangeEvent>( 'change:data', event => {\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( this.props.onChange ) {\n\t\t\t\t\t\tthis.props.onChange( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tviewDocument.on( 'focus', event => {\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( this.props.onFocus ) {\n\t\t\t\t\t\tthis.props.onFocus( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tviewDocument.on( 'blur', event => {\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( this.props.onBlur ) {\n\t\t\t\t\t\tthis.props.onBlur( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn editor;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Destroys the editor by destroying the watchdog.\n\t */\n\tprivate async _destroyEditor( initializeResult: EditorSemaphoreMountResult<Editor> ): Promise<void> {\n\t\tconst { watchdog, instance } = initializeResult;\n\n\t\treturn new Promise<void>( ( resolve, reject ) => {\n\t\t\t// It may happen during the tests that the watchdog instance is not assigned before destroying itself. See: #197.\n\t\t\t//\n\t\t\t// Additionally, we need to find a way to detect if the whole context has been destroyed. As `componentWillUnmount()`\n\t\t\t// could be fired by <CKEditorContext /> and <CKEditor /> at the same time, this `setTimeout()` makes sure\n\t\t\t// that <CKEditorContext /> component will be destroyed first, so during the code execution\n\t\t\t// the `ContextWatchdog#state` would have a correct value. See `EditorWatchdogAdapter#destroy()` for more information.\n\t\t\t/* istanbul ignore next -- @preserve */\n\t\t\tsetTimeout( async () => {\n\t\t\t\ttry {\n\t\t\t\t\tif ( watchdog ) {\n\t\t\t\t\t\tawait watchdog.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( instance ) {\n\t\t\t\t\t\tawait instance.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tconsole.error( e );\n\t\t\t\t\treject( e );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns true when the editor should be updated.\n\t *\n\t * @param prevProps Previous react's properties.\n\t * @param nextProps React's properties.\n\t * @param editor Current editor instance.\n\t */\n\tprivate _shouldUpdateEditorData( prevProps: Readonly<Props<TEditor>>, nextProps: Readonly<Props<TEditor>>, editor: TEditor ): boolean {\n\t\t// Check whether `nextProps.data` is equal to `this.props.data` is required if somebody defined the `#data`\n\t\t// property as a static string and updated a state of component when the editor's content has been changed.\n\t\t// If we avoid checking those properties, the editor's content will back to the initial value because\n\t\t// the state has been changed and React will call this method.\n\t\tif ( prevProps.data === nextProps.data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We should not change data if the editor's content is equal to the `#data` property.\n\t\tif ( editor.data.get() === nextProps.data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the editor configuration.\n\t */\n\tprivate _getConfig(): EditorConfig {\n\t\tconst config = this.props.config || {};\n\n\t\tif ( this.props.data && config.initialData ) {\n\t\t\tconsole.warn(\n\t\t\t\t'Editor data should be provided either using `config.initialData` or `content` property. ' +\n\t\t\t\t'The config value takes precedence over `content` property and will be used when both are specified.'\n\t\t\t);\n\t\t}\n\n\t\t// Merge two possible ways of providing data into the `config.initialData` field.\n\t\treturn {\n\t\t\t...config,\n\t\t\tinitialData: config.initialData || this.props.data || ''\n\t\t};\n\t}\n\n\tpublic static override contextType = ContextWatchdogContext;\n\n\t// Properties definition.\n\tpublic static propTypes = {\n\t\teditor: PropTypes.func.isRequired as unknown as Validator<{ create( ...args: any ): Promise<any> }>,\n\t\tdata: PropTypes.string,\n\t\tconfig: PropTypes.object,\n\t\tdisableWatchdog: PropTypes.bool,\n\t\twatchdogConfig: PropTypes.object,\n\t\tonChange: PropTypes.func,\n\t\tonReady: PropTypes.func,\n\t\tonFocus: PropTypes.func,\n\t\tonBlur: PropTypes.func,\n\t\tonError: PropTypes.func,\n\t\tdisabled: PropTypes.bool,\n\t\tid: PropTypes.any\n\t};\n}\n\n/**\n * TODO this is type space definition for props, the CKEditor.propTypes is a run-time props validation that should match.\n */\nexport interface Props<TEditor extends Editor> extends InferProps<typeof CKEditor.propTypes> {\n\teditor: {\n\t\tcreate( ...args: any ): Promise<TEditor>;\n\t\tEditorWatchdog: typeof EditorWatchdog;\n\t\tContextWatchdog: typeof ContextWatchdog;\n\t};\n\tcontextItemMetadata?: CKEditorConfigContextMetadata;\n\tconfig?: EditorConfig;\n\twatchdogConfig?: WatchdogConfig;\n\tdisableWatchdog?: boolean;\n\tonReady?: ( editor: TEditor ) => void;\n\tonAfterDestroy?: ( editor: TEditor ) => void;\n\tonError?: ( error: Error, details: ErrorDetails ) => void;\n\tonChange?: ( event: EventInfo, editor: TEditor ) => void;\n\tonFocus?: ( event: EventInfo, editor: TEditor ) => void;\n\tonBlur?: ( event: EventInfo, editor: TEditor ) => void;\n}\n\ninterface ErrorDetails {\n\tphase: 'initialization' | 'runtime';\n\twillEditorRestart?: boolean;\n}\n\n/**\n * An adapter aligning the context watchdog API to the editor watchdog API for easier usage.\n */\nexport class EditorWatchdogAdapter<TEditor extends Editor> {\n\t/**\n\t * The context watchdog instance that will be wrapped into editor watchdog API.\n\t */\n\tprivate readonly _contextWatchdog: ContextWatchdog;\n\n\t/**\n\t * A unique id for the adapter to distinguish editor items when using the context watchdog API.\n\t */\n\tprivate readonly _id: string;\n\n\t/**\n\t * A watchdog's editor creator function.\n\t */\n\tprivate _creator?: EditorCreatorFunction;\n\n\t/**\n\t * @param contextWatchdog The context watchdog instance that will be wrapped into editor watchdog API.\n\t */\n\tconstructor( contextWatchdog: ContextWatchdog ) {\n\t\tthis._contextWatchdog = contextWatchdog;\n\t\tthis._id = uid();\n\t}\n\n\t/**\n\t *  @param creator A watchdog's editor creator function.\n\t */\n\tpublic setCreator( creator: EditorCreatorFunction ): void {\n\t\tthis._creator = creator;\n\t}\n\n\t/**\n\t * Adds an editor configuration to the context watchdog registry. Creates an instance of it.\n\t *\n\t * @param sourceElementOrData A source element or data for the new editor.\n\t * @param config CKEditor 5 editor config.\n\t */\n\tpublic create( sourceElementOrData: HTMLElement | string, config: EditorConfig ): Promise<unknown> {\n\t\treturn this._contextWatchdog.add( {\n\t\t\tsourceElementOrData,\n\t\t\tconfig,\n\t\t\tcreator: this._creator!,\n\t\t\tid: this._id,\n\t\t\ttype: 'editor'\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a listener that is attached to context watchdog's item and run when the context watchdog fires.\n\t * Currently works only for the `error` event.\n\t */\n\tpublic on( _: string, callback: ( _: null, data: { error: Error; causesRestart?: boolean } ) => void ): void {\n\t\t// Assume that the event name was error.\n\t\tthis._contextWatchdog.on( 'itemError', ( _, { itemId, error } ) => {\n\t\t\tif ( itemId === this._id ) {\n\t\t\t\tcallback( null, { error, causesRestart: undefined } );\n\t\t\t}\n\t\t} );\n\t}\n\n\tpublic destroy(): Promise<unknown> {\n\t\t// Destroying an editor instance after destroying the Context is handled in the `ContextWatchdog` class.\n\t\t// As `EditorWatchdogAdapter` is an adapter, we should not destroy the editor manually.\n\t\t// Otherwise, it causes that the editor is destroyed twice. However, there is a case, when the editor\n\t\t// needs to be removed from the context, without destroying the context itself. We may assume the following\n\t\t// relations with `ContextWatchdog#state`:\n\t\t//\n\t\t// a) `ContextWatchdog#state` === 'ready' - context is not destroyed; it's safe to destroy the editor manually.\n\t\t// b) `ContextWatchdog#state` === 'destroyed' - context is destroyed; let `ContextWatchdog` handle the whole process.\n\t\t//\n\t\t// See #354 for more information.\n\t\tif ( this._contextWatchdog.state === 'ready' ) {\n\t\t\treturn this._contextWatchdog.remove( this._id );\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * An editor instance.\n\t */\n\tpublic get editor(): TEditor {\n\t\treturn this._contextWatchdog.getItem( this._id ) as TEditor;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { MutableRefObject } from 'react';\n\ntype CallbackRef<T> = ( element: T ) => void;\n\ntype ReactRef<T> = CallbackRef<T | null> | MutableRefObject<T | null> | null;\n\n/**\n * Combine multiple react refs into one.\n */\nexport function mergeRefs<T>( ...refs: Array<ReactRef<T>> ): CallbackRef<T> {\n\treturn value => {\n\t\trefs.forEach( ref => {\n\t\t\tif ( typeof ref === 'function' ) {\n\t\t\t\tref( value );\n\t\t\t} else if ( ref != null ) {\n\t\t\t\tref.current = value;\n\t\t\t}\n\t\t} );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { useState, type DependencyList } from 'react';\nimport { shallowCompareArrays } from '@ckeditor/ckeditor5-integrations-common';\n\n/**\n * Triggers an effect immediately if the dependencies change (during rendering of component).\n *\n * @param fn The effect function to execute.\n * @param deps The dependency list.\n */\nexport const useInstantEffect = ( fn: VoidFunction, deps: DependencyList ): void => {\n\tconst [ prevDeps, setDeps ] = useState<any>( null );\n\n\tif ( !shallowCompareArrays( prevDeps, deps ) ) {\n\t\tfn();\n\t\tsetDeps( [ ...deps ] );\n\t}\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport React, {\n\tforwardRef, useState, useEffect, useRef, useContext, useCallback, memo,\n\ttype Dispatch, type SetStateAction, type RefObject\n} from 'react';\n\nimport { overwriteArray, overwriteObject, uniq } from '@ckeditor/ckeditor5-integrations-common';\n\nimport type {\n\tInlineEditableUIView,\n\tEditorConfig,\n\tDocumentChangeEvent,\n\tWriter,\n\tRootElement,\n\tWatchdogConfig,\n\tAddRootEvent,\n\tDetachRootEvent,\n\tMultiRootEditor,\n\tEventInfo\n} from 'ckeditor5';\n\nimport { ContextWatchdogContext, isContextWatchdogReadyToUse } from './context/ckeditorcontext.js';\nimport { EditorWatchdogAdapter } from './ckeditor.js';\n\nimport type { EditorSemaphoreMountResult } from './lifecycle/LifeCycleEditorSemaphore.js';\n\nimport { useLifeCycleSemaphoreSyncRef, type LifeCycleSemaphoreSyncRefResult } from './lifecycle/useLifeCycleSemaphoreSyncRef.js';\nimport { mergeRefs } from './utils/mergeRefs.js';\nimport { LifeCycleElementSemaphore } from './lifecycle/LifeCycleElementSemaphore.js';\nimport { useRefSafeCallback } from './hooks/useRefSafeCallback.js';\nimport { useInstantEditorEffect } from './hooks/useInstantEditorEffect.js';\n\nimport { appendAllIntegrationPluginsToConfig } from './plugins/appendAllIntegrationPluginsToConfig.js';\n\nconst REACT_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from React integration (@ckeditor/ckeditor5-react)';\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nconst useMultiRootEditor = ( props: MultiRootHookProps ): MultiRootHookReturns => {\n\tconst semaphoreElementRef = useRef<HTMLElement>( props.semaphoreElement || null );\n\tconst semaphore = useLifeCycleSemaphoreSyncRef<LifeCycleMountResult>();\n\n\tconst editorRefs: LifeCycleSemaphoreRefs<MultiRootEditor> = {\n\t\twatchdog: semaphore.createAttributeRef( 'watchdog' ),\n\t\tinstance: semaphore.createAttributeRef( 'instance' )\n\t};\n\n\tconst context = useContext( ContextWatchdogContext );\n\n\t// List of editor root elements.\n\tconst [ roots, setRoots ] = useState<Array<string>>( () => Object.keys( props.data ) );\n\n\t// Current editor data. An object where each key is a root name and the value is the root content.\n\tconst [ data, setData ] = useState<Record<string, string>>( { ...props.data } );\n\n\t// Current roots attributes. An object where each key is a root name and the value is an object with root attributes.\n\tconst [ attributes, setAttributes ] = useState<Record<string, Record<string, unknown>>>( { ...props.rootsAttributes } );\n\n\tconst shouldUpdateEditor = useRef<boolean>( true );\n\n\t/**\n\t * It's possible to unmount `useMultiRootEditor` with created editor and `elements` that are not attached to any React node.\n\t * It means that CKEditor will try to destroy editor and all it's roots in destructor. It will throw an error because\n\t * `editables` are not attached to any React node and their elements references are null. To prevent this error we need to\n\t * force assign `editables` to fake elements before destroying editor.\n\t *\n\t * See: https://github.com/ckeditor/ckeditor5/issues/16561\n\t */\n\tconst forceAssignFakeEditableElements = () => {\n\t\tconst editor = editorRefs.instance.current;\n\n\t\tif ( !editor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst initializeEditableWithFakeElement = ( editable: InlineEditableUIView ) => {\n\t\t\tif ( editable.name && !editor.editing.view.getDomRoot( editable.name ) ) {\n\t\t\t\teditor.editing.view.attachDomRoot( document.createElement( 'div' ), editable.name );\n\t\t\t}\n\t\t};\n\n\t\tObject\n\t\t\t.values( editor.ui.view.editables )\n\t\t\t.forEach( initializeEditableWithFakeElement );\n\t};\n\n\tuseEffect( () => {\n\t\tconst semaphoreElement = semaphoreElementRef.current;\n\n\t\t// Check if parent context is ready (only if it is provided).\n\t\tif ( context && !isContextWatchdogReadyToUse( context ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if hook internal state or attributes are not ready yet.\n\t\tif ( !semaphoreElement || props.isLayoutReady === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsemaphore.replace( () => new LifeCycleElementSemaphore( semaphoreElement, {\n\t\t\tmount: _initializeEditor,\n\t\t\tafterMount: ( { mountResult } ) => {\n\t\t\t\tconst { onReady } = props;\n\n\t\t\t\tif ( onReady && semaphoreElementRef.current !== null ) {\n\t\t\t\t\tonReady( mountResult.instance );\n\t\t\t\t}\n\t\t\t},\n\t\t\tunmount: async ( { element, mountResult } ) => {\n\t\t\t\tconst { onAfterDestroy } = props;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait _destroyEditor( mountResult );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Make sure that nothing left in actual editor element. There can be custom integrations that\n\t\t\t\t\t * appends something to container. Let's reset element every update cycle before mounting another\n\t\t\t\t\t * editor instance.\n\t\t\t\t\t */\n\t\t\t\t\telement.innerHTML = '';\n\t\t\t\t} finally {\n\t\t\t\t\t/**\n\t\t\t\t\t * Broadcast information about destroying current instance. It is useful for removing duplicated\n\t\t\t\t\t * toolbars in decoupled editor mode.\n\t\t\t\t\t */\n\t\t\t\t\tif ( onAfterDestroy ) {\n\t\t\t\t\t\tonAfterDestroy( mountResult.instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} ) );\n\n\t\treturn () => {\n\t\t\tforceAssignFakeEditableElements();\n\t\t\tsemaphore.release( false );\n\t\t};\n\t}, [ props.id, props.isLayoutReady, context?.status ] );\n\n\t/**\n\t * Returns the editor configuration.\n\t */\n\tconst _getConfig = (): EditorConfig => {\n\t\tconst config = props.config || {};\n\n\t\tif ( props.data && config.initialData ) {\n\t\t\tconsole.warn(\n\t\t\t\t'Editor data should be provided either using `config.initialData` or `data` property. ' +\n\t\t\t\t'The config value takes precedence over `data` property and will be used when both are specified.'\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\t...config,\n\t\t\trootsAttributes: attributes\n\t\t};\n\t};\n\n\t/**\n\t * Callback function for handling changed data and attributes in the editor.\n\t */\n\tconst onChangeData = useRefSafeCallback( ( editor: MultiRootEditor, event: EventInfo ): void => {\n\t\tconst modelDocument = editor!.model.document;\n\n\t\tif ( !props.disableTwoWayDataBinding ) {\n\t\t\tconst newData: Record<string, string> = {};\n\t\t\tconst newAttributes: Record<string, Record<string, unknown>> = {};\n\n\t\t\tmodelDocument.differ.getChanges()\n\t\t\t\t.forEach( change => {\n\t\t\t\t\tlet root: RootElement;\n\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( change.type == 'insert' || change.type == 'remove' ) {\n\t\t\t\t\t\troot = change.position.root as RootElement;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Must be `attribute` diff item.\n\t\t\t\t\t\troot = change.range.root as RootElement;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Getting data from a not attached root will trigger a warning.\n\t\t\t\t\t// There is another callback for handling detached roots.\n\t\t\t\t\tif ( !root.isAttached() ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { rootName } = root;\n\n\t\t\t\t\tnewData[ rootName ] = editor!.getData( { rootName } );\n\t\t\t\t} );\n\n\t\t\tmodelDocument.differ.getChangedRoots()\n\t\t\t\t.forEach( changedRoot => {\n\t\t\t\t\t// Ignore added and removed roots. They are handled by a different function.\n\t\t\t\t\t// Only register if roots attributes changed.\n\t\t\t\t\tif ( changedRoot.state ) {\n\t\t\t\t\t\tif ( newData[ changedRoot.name ] !== undefined ) {\n\t\t\t\t\t\t\tdelete newData[ changedRoot.name ];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rootName = changedRoot.name;\n\n\t\t\t\t\tnewAttributes[ rootName ] = editor!.getRootAttributes( rootName );\n\t\t\t\t} );\n\n\t\t\tif ( Object.keys( newData ).length ) {\n\t\t\t\tsetData( previousData => ( { ...previousData, ...newData } ) );\n\t\t\t}\n\n\t\t\tif ( Object.keys( newAttributes ).length ) {\n\t\t\t\tsetAttributes( previousAttributes => ( { ...previousAttributes, ...newAttributes } ) );\n\t\t\t}\n\t\t}\n\n\t\t/* istanbul ignore else -- @preserve */\n\t\tif ( props.onChange ) {\n\t\t\tprops.onChange( event, editor! );\n\t\t}\n\t} );\n\n\t/**\n\t * Callback function for handling an added root.\n\t */\n\tconst onAddRoot = useRefSafeCallback( ( editor: MultiRootEditor, _evt: EventInfo, root: RootElement ): void => {\n\t\tconst rootName = root.rootName;\n\n\t\tif ( !props.disableTwoWayDataBinding ) {\n\t\t\tsetData( previousData =>\n\t\t\t\t( { ...previousData, [ rootName ]: editor!.getData( { rootName } ) } )\n\t\t\t);\n\n\t\t\tsetAttributes( previousAttributes =>\n\t\t\t\t( { ...previousAttributes, [ rootName ]: editor!.getRootAttributes( rootName ) } )\n\t\t\t);\n\t\t}\n\n\t\tsetRoots( prevRoots => uniq( [ ...prevRoots, root.rootName ] ) );\n\t} );\n\n\t/**\n\t * Callback function for handling a detached root.\n\t */\n\tconst onDetachRoot = useRefSafeCallback( ( _editor: MultiRootEditor, _evt: EventInfo, root: RootElement ): void => {\n\t\tconst rootName = root.rootName;\n\n\t\tif ( !props.disableTwoWayDataBinding ) {\n\t\t\tsetData( previousData => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t\tconst { [ rootName! ]: _, ...newData } = previousData;\n\n\t\t\t\treturn { ...newData };\n\t\t\t} );\n\n\t\t\tsetAttributes( previousAttributes => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t\tconst { [ rootName! ]: _, ...newAttributes } = previousAttributes;\n\n\t\t\t\treturn { ...newAttributes };\n\t\t\t} );\n\t\t}\n\n\t\tsetRoots( prevRoots => prevRoots.filter( root => root !== rootName ) );\n\t} );\n\n\t/**\n\t * Creates an editor using initial elements or data, and configuration.\n\t *\n\t * @param initialData The initial data.\n\t * @param config CKEditor 5 editor configuration.\n\t */\n\tconst _createEditor = useRefSafeCallback( (\n\t\tinitialData: Record<string, string> | Record<string, HTMLElement>,\n\t\tconfig: EditorConfig\n\t): Promise<MultiRootEditor> => {\n\t\toverwriteObject( { ...props.rootsAttributes }, attributes );\n\t\toverwriteObject( { ...props.data }, data );\n\t\toverwriteArray( Object.keys( props.data ), roots );\n\n\t\treturn props.editor.create(\n\t\t\tinitialData,\n\t\t\tappendAllIntegrationPluginsToConfig( config )\n\t\t)\n\t\t\t.then( ( editor: MultiRootEditor ) => {\n\t\t\t\tconst editorData = editor.getFullData();\n\n\t\t\t\t// Rerender will be called anyway.\n\t\t\t\toverwriteObject( { ...editorData }, data );\n\t\t\t\toverwriteObject( { ...editor.getRootsAttributes() }, attributes );\n\t\t\t\toverwriteArray( Object.keys( editorData ), roots );\n\n\t\t\t\tif ( props.disabled ) {\n\t\t\t\t\t// Switch to the read-only mode if the `[disabled]` attribute is specified.\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\teditor.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t}\n\n\t\t\t\tconst modelDocument = editor.model.document;\n\t\t\t\tconst viewDocument = editor.editing.view.document;\n\n\t\t\t\tmodelDocument.on<DocumentChangeEvent>( 'change:data', evt => onChangeData( editor, evt ) );\n\n\t\t\t\teditor.on<AddRootEvent>( 'addRoot', ( evt, root ) => onAddRoot( editor, evt, root ) );\n\t\t\t\teditor.on<DetachRootEvent>( 'detachRoot', ( evt, root ) => onDetachRoot( editor, evt, root ) );\n\n\t\t\t\tviewDocument.on( 'focus', event => {\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( props.onFocus ) {\n\t\t\t\t\t\tprops.onFocus( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tviewDocument.on( 'blur', event => {\n\t\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\t\tif ( props.onBlur ) {\n\t\t\t\t\t\tprops.onBlur( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn editor;\n\t\t\t} );\n\t} );\n\n\t/**\n\t * Destroys the editor by destroying the watchdog.\n\t */\n\tconst _destroyEditor = ( initializeResult: EditorSemaphoreMountResult<MultiRootEditor> ): Promise<void> => {\n\t\tconst { watchdog, instance } = initializeResult;\n\n\t\treturn new Promise<void>( ( resolve, reject ) => {\n\t\t\t// It may happen during the tests that the watchdog instance is not assigned before destroying itself. See: #197.\n\t\t\t//\n\t\t\t// Additionally, we need to find a way to detect if the whole context has been destroyed. As `componentWillUnmount()`\n\t\t\t// could be fired by <CKEditorContext /> and <CKEditor /> at the same time, this `setTimeout()` makes sure\n\t\t\t// that <CKEditorContext /> component will be destroyed first, so during the code execution\n\t\t\t// the `ContextWatchdog#state` would have a correct value. See `EditorWatchdogAdapter#destroy()` for more information.\n\t\t\t/* istanbul ignore next -- @preserve */\n\t\t\tsetTimeout( async () => {\n\t\t\t\ttry {\n\t\t\t\t\tif ( watchdog ) {\n\t\t\t\t\t\tawait watchdog.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( instance ) {\n\t\t\t\t\t\tawait instance.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tconsole.error( e );\n\t\t\t\t\treject( e );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n\n\t/**\n\t * Initializes the editor by creating a proper watchdog and initializing it with the editor's configuration.\n\t */\n\tconst _initializeEditor = async (): Promise<LifeCycleMountResult> => {\n\t\tif ( props.disableWatchdog ) {\n\t\t\tconst instance = await _createEditor( props.data as any, _getConfig() );\n\n\t\t\treturn {\n\t\t\t\tinstance: instance as MultiRootEditor,\n\t\t\t\twatchdog: null\n\t\t\t};\n\t\t}\n\n\t\tconst watchdog = ( () => {\n\t\t\tif ( isContextWatchdogReadyToUse( context ) ) {\n\t\t\t\treturn new EditorWatchdogAdapter( context.watchdog );\n\t\t\t}\n\n\t\t\treturn new props.editor.EditorWatchdog( props.editor, props.watchdogConfig );\n\t\t} )() as EditorWatchdogAdapter<MultiRootEditor>;\n\n\t\tconst totalRestartsRef = {\n\t\t\tcurrent: 0\n\t\t};\n\n\t\t// Keeping using `data` from creator function callback seems to be a good idea in theory,\n\t\t// but in practice, it leads to instability. The `data` object can be changed during the editor\n\t\t// initialization, which can lead to unexpected reset of value in the editor, that do not match\n\t\t// with the current react state. To prevent this, we are using the `data` from the hook state.\n\t\t// It's not super optimal, but it's the most stable solution at this moment.\n\t\t// See more: https://github.com/ckeditor/ckeditor5-react/issues/542\n\t\twatchdog.setCreator( async ( _, config ) => {\n\t\t\tconst { onAfterDestroy } = props;\n\n\t\t\tif ( totalRestartsRef.current > 0 && onAfterDestroy && editorRefs.instance.current ) {\n\t\t\t\tonAfterDestroy( editorRefs.instance.current );\n\t\t\t}\n\n\t\t\tconst instance = await _createEditor( data as any, config );\n\n\t\t\tif ( totalRestartsRef.current > 0 ) {\n\t\t\t\tsemaphore.unsafeSetValue( {\n\t\t\t\t\tinstance,\n\t\t\t\t\twatchdog\n\t\t\t\t} );\n\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t/* istanbul ignore next -- @preserve */\n\t\t\t\t\tif ( props.onReady ) {\n\t\t\t\t\t\tprops.onReady( watchdog!.editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\ttotalRestartsRef.current++;\n\t\t\treturn instance;\n\t\t} );\n\n\t\twatchdog.on( 'error', ( _, { error, causesRestart } ) => {\n\t\t\tconst onError = props.onError || console.error;\n\t\t\tonError( error, { phase: 'runtime', willEditorRestart: causesRestart } );\n\t\t} );\n\n\t\tawait watchdog\n\t\t\t.create( data as any, _getConfig() )\n\t\t\t.catch( error => {\n\t\t\t\tconst onError = props.onError || console.error;\n\t\t\t\tonError( error, { phase: 'initialization', willEditorRestart: false } );\n\t\t\t\tthrow error;\n\t\t\t} );\n\n\t\treturn {\n\t\t\twatchdog,\n\t\t\tinstance: watchdog!.editor\n\t\t};\n\t};\n\n\tconst _getStateDiff = (\n\t\tpreviousState: Record<string, unknown>,\n\t\tnewState: Record<string, unknown>\n\t): {\n\t\taddedKeys: Array<string>;\n\t\tremovedKeys: Array<string>;\n\t} => {\n\t\tconst previousStateKeys = Object.keys( previousState );\n\t\tconst newStateKeys = Object.keys( newState );\n\n\t\treturn {\n\t\t\taddedKeys: newStateKeys.filter( key => !previousStateKeys.includes( key ) ),\n\t\t\tremovedKeys: previousStateKeys.filter( key => !newStateKeys.includes( key ) )\n\t\t};\n\t};\n\n\tconst _externalSetData: Dispatch<SetStateAction<Record<string, string>>> = useCallback(\n\t\tnewData => {\n\t\t\tsemaphore.runAfterMount( () => {\n\t\t\t\tshouldUpdateEditor.current = true;\n\t\t\t\tsetData( newData );\n\t\t\t} );\n\t\t},\n\t\t[ setData ]\n\t);\n\n\tconst _externalSetAttributes: Dispatch<SetStateAction<Record<string, Record<string, unknown>>>> = useCallback(\n\t\tnewAttributes => {\n\t\t\tsemaphore.runAfterMount( () => {\n\t\t\t\tshouldUpdateEditor.current = true;\n\t\t\t\tsetAttributes( newAttributes );\n\t\t\t} );\n\t\t},\n\t\t[ setAttributes ]\n\t);\n\n\tconst toolbarElement = (\n\t\t<EditorToolbarWrapper\n\t\t\tref={ semaphoreElementRef }\n\t\t\teditor={editorRefs.instance.current}\n\t\t/>\n\t);\n\n\tuseInstantEditorEffect( semaphore.current, ( { instance } ) => {\n\t\tif ( props.disabled ) {\n\t\t\tinstance.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t} else {\n\t\t\tinstance.disableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t}\n\t}, [ props.disabled ] );\n\n\tuseInstantEditorEffect( semaphore.current, ( { instance } ) => {\n\t\t// Editor should be only updated when the changes come from the integrator React application.\n\t\tif ( shouldUpdateEditor.current ) {\n\t\t\tshouldUpdateEditor.current = false;\n\n\t\t\tconst dataKeys = Object.keys( data );\n\t\t\tconst attributesKeys = Object.keys( attributes );\n\n\t\t\t// Check if `data` and `attributes` have the same keys.\n\t\t\t//\n\t\t\t// It prevents the addition of attributes for non-existing roots.\n\t\t\t// If the `data` object has a different set of keys, an error will not be thrown\n\t\t\t// since the attributes will be removed/added during root initialization/destruction.\n\t\t\tif ( !dataKeys.every( key => attributesKeys.includes( key ) ) ) {\n\t\t\t\tconsole.error( '`data` and `attributes` objects must have the same keys (roots).' );\n\t\t\t\tthrow new Error( '`data` and `attributes` objects must have the same keys (roots).' );\n\t\t\t}\n\n\t\t\tconst editorData = instance.getFullData();\n\t\t\tconst editorAttributes = instance.getRootsAttributes();\n\n\t\t\tconst {\n\t\t\t\taddedKeys: newRoots,\n\t\t\t\tremovedKeys: removedRoots\n\t\t\t} = _getStateDiff(\n\t\t\t\teditorData,\n\t\t\t\tdata || /* istanbul ignore next -- @preserve: It should never happen, data should be always filled. */ {}\n\t\t\t);\n\n\t\t\tconst modifiedRoots = dataKeys.filter( rootName =>\n\t\t\t\teditorData[ rootName ] !== undefined &&\n\t\t\t\tJSON.stringify( editorData[ rootName ] ) !== JSON.stringify( data[ rootName ] )\n\t\t\t);\n\n\t\t\tconst rootsWithChangedAttributes = attributesKeys.filter( rootName =>\n\t\t\t\tJSON.stringify( editorAttributes[ rootName ] ) !== JSON.stringify( attributes[ rootName ] ) );\n\n\t\t\tconst _handleNewRoots = ( roots: Array<string> ) => {\n\t\t\t\troots.forEach( rootName => {\n\t\t\t\t\tinstance!.addRoot( rootName, {\n\t\t\t\t\t\tdata: data[ rootName ] || '',\n\t\t\t\t\t\tattributes: attributes?.[ rootName ] ||\n\t\t\t\t\t\t/* istanbul ignore next -- @preserve: attributes should be in sync with root keys */ {},\n\t\t\t\t\t\tisUndoable: true\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tconst _handleRemovedRoots = ( roots: Array<string> ) => {\n\t\t\t\troots.forEach( rootName => {\n\t\t\t\t\tinstance!.detachRoot( rootName, true );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tconst _updateEditorData = ( roots: Array<string> ) => {\n\t\t\t\tconst dataToUpdate = roots.reduce(\n\t\t\t\t\t( result, rootName ) => ( { ...result, [ rootName ]: data[ rootName ] } ),\n\t\t\t\t\tObject.create( null )\n\t\t\t\t);\n\t\t\t\tinstance.data.set( dataToUpdate, { suppressErrorInCollaboration: true } as any );\n\t\t\t};\n\n\t\t\tconst _updateEditorAttributes = ( writer: Writer, roots: Array<string> ) => {\n\t\t\t\troots.forEach( rootName => {\n\t\t\t\t\tObject.keys( attributes![ rootName ] ).forEach( attr => {\n\t\t\t\t\t\tinstance.registerRootAttribute( attr );\n\t\t\t\t\t} );\n\n\t\t\t\t\twriter.clearAttributes( instance.model.document.getRoot( rootName )! );\n\t\t\t\t\twriter.setAttributes( attributes![ rootName ], instance.model.document.getRoot( rootName )! );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\t// React struggles with rerendering during `instance.model.change` callbacks.\n\t\t\tsetTimeout( () => {\n\t\t\t\tinstance.model.change( writer => {\n\t\t\t\t\t_handleNewRoots( newRoots );\n\t\t\t\t\t_handleRemovedRoots( removedRoots );\n\n\t\t\t\t\tif ( modifiedRoots.length ) {\n\t\t\t\t\t\t_updateEditorData( modifiedRoots );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rootsWithChangedAttributes.length ) {\n\t\t\t\t\t\t_updateEditorAttributes( writer, rootsWithChangedAttributes );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t}, [ data, attributes ] );\n\n\tconst editableElements = roots.map(\n\t\trootName => (\n\t\t\t<EditorEditable\n\t\t\t\tkey={rootName}\n\t\t\t\tid={rootName}\n\t\t\t\trootName={rootName}\n\t\t\t\tsemaphore={semaphore}\n\t\t\t/>\n\t\t)\n\t);\n\n\treturn {\n\t\teditor: editorRefs.instance.current,\n\t\teditableElements,\n\t\ttoolbarElement,\n\t\tdata, setData: _externalSetData,\n\t\tattributes, setAttributes: _externalSetAttributes\n\t};\n};\n\nexport const EditorEditable = memo( forwardRef( ( { id, semaphore, rootName }: {\n\tid: string;\n\trootName: string;\n\tsemaphore: LifeCycleSemaphoreSyncRefResult<LifeCycleMountResult>;\n}, ref ) => {\n\tconst innerRef = useRef<HTMLDivElement>( null );\n\n\tuseEffect( () => {\n\t\tlet editable: InlineEditableUIView | null;\n\t\tlet editor: MultiRootEditor | null;\n\n\t\tsemaphore.runAfterMount( ( { instance } ) => {\n\t\t\tif ( !innerRef.current ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor = instance;\n\n\t\t\tconst { ui, model } = editor;\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root && editor.ui.getEditableElement( rootName ) ) {\n\t\t\t\teditor.detachEditable( root );\n\t\t\t}\n\n\t\t\teditable = ui.view.createEditable( rootName, innerRef.current );\n\t\t\tui.addEditable( editable );\n\n\t\t\tinstance.editing.view.forceRender();\n\t\t} );\n\n\t\treturn () => {\n\t\t\tif ( editor && editor.state !== 'destroyed' && innerRef.current ) {\n\t\t\t\tconst root = editor.model.document.getRoot( rootName );\n\n\t\t\t\t/* istanbul ignore else -- @preserve */\n\t\t\t\tif ( root ) {\n\t\t\t\t\teditor.detachEditable( root );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}, [ semaphore.revision ] );\n\n\treturn (\n\t\t<div\n\t\t\tkey={semaphore.revision}\n\t\t\tid={id}\n\t\t\tref={ mergeRefs( ref, innerRef ) }\n\t\t/>\n\t);\n} ) );\n\nEditorEditable.displayName = 'EditorEditable';\n\nexport const EditorToolbarWrapper = forwardRef( ( { editor }: any, ref ) => {\n\tconst toolbarRef = useRef<HTMLDivElement>( null );\n\n\tuseEffect( () => {\n\t\tconst toolbarContainer = toolbarRef.current;\n\n\t\tif ( !editor || !toolbarContainer ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst element = editor.ui.view.toolbar.element!;\n\n\t\ttoolbarContainer.appendChild( element! );\n\n\t\treturn () => {\n\t\t\tif ( toolbarContainer.contains( element ) ) {\n\t\t\t\ttoolbarContainer.removeChild( element! );\n\t\t\t}\n\t\t};\n\t}, [ editor && editor.id ] );\n\n\treturn <div ref={mergeRefs( toolbarRef, ref )}></div>;\n} );\n\nEditorToolbarWrapper.displayName = 'EditorToolbarWrapper';\n\nexport default useMultiRootEditor;\n\ntype LifeCycleMountResult = EditorSemaphoreMountResult<MultiRootEditor>;\n\ntype LifeCycleSemaphoreRefs<TEditor extends MultiRootEditor> = {\n\t[ K in keyof EditorSemaphoreMountResult<TEditor> ]: RefObject<EditorSemaphoreMountResult<TEditor>[ K ]>\n};\n\ninterface ErrorDetails {\n\tphase: 'initialization' | 'runtime';\n\twillEditorRestart?: boolean;\n}\n\nexport type MultiRootHookProps = {\n\tid?: any;\n\tsemaphoreElement?: HTMLElement;\n\n\tisLayoutReady?: boolean;\n\tdisabled?: boolean;\n\tdata: Record<string, string>;\n\trootsAttributes?: Record<string, Record<string, unknown>>;\n\teditor: typeof MultiRootEditor;\n\twatchdogConfig?: WatchdogConfig;\n\tdisableWatchdog?: boolean;\n\tdisableTwoWayDataBinding?: boolean;\n\n\tonReady?: ( editor: MultiRootEditor ) => void;\n\tonAfterDestroy?: ( editor: MultiRootEditor ) => void;\n\tonError?: ( error: Error, details: ErrorDetails ) => void;\n\tonChange?: ( event: EventInfo, editor: MultiRootEditor ) => void;\n\tonFocus?: ( event: EventInfo, editor: MultiRootEditor ) => void;\n\tonBlur?: ( event: EventInfo, editor: MultiRootEditor ) => void;\n\n\tconfig?: Record<string, unknown>;\n};\n\nexport type MultiRootHookReturns = {\n\teditor: MultiRootEditor | null;\n\teditableElements: Array<JSX.Element>;\n\ttoolbarElement: JSX.Element;\n\tdata: Record<string, string>;\n\tsetData: Dispatch<SetStateAction<Record<string, string>>>;\n\tattributes: Record<string, Record<string, unknown>>;\n\tsetAttributes: Dispatch<SetStateAction<Record<string, Record<string, unknown>>>>;\n};\n"],"names":["DividerRoot","styled","name","slot","overridesResolver","props","styles","ownerState","root","absolute","variant","light","orientation","vertical","flexItem","children","withChildren","withChildrenVertical","textAlign","textAlignRight","textAlignLeft","memoTheme","_ref","theme","margin","flexShrink","borderWidth","borderStyle","borderColor","vars","palette","divider","borderBottomWidth","variants","style","position","bottom","left","width","dividerChannel","alpha","marginLeft","spacing","marginRight","marginTop","marginBottom","height","borderRightWidth","alignSelf","_ref2","display","border","borderTopStyle","borderLeftStyle","content","_ref3","borderTop","_ref4","flexDirection","borderLeft","_ref5","_ref6","DividerWrapper","wrapper","wrapperVertical","_ref7","paddingLeft","paddingRight","whiteSpace","paddingTop","paddingBottom","Divider","React","inProps","ref","useDefaultProps","className","component","role","undefined","other","classes","slots","composeClasses","getDividerUtilityClass","useUtilityClasses","_jsx","as","clsx","muiSkipListHighlight","HEX_NUMBERS","Array","fill","map","_","index","toString","slice","isSemanticVersion","version","test","isCKCdnTestingVersion","some","testVersion","includes","destructureSemanticVersion","Error","major","minor","patch","split","Number","parseInt","getLicenseVersionFromEditorVersion","getCKBaseBundleInstallationInfo","CKEDITOR_VERSION","CKEDITOR","window","source","isCKEditorFreeLicense","licenseKey","licenseVersion","installationInfo","getSupportedLicenseVersionInstallationInfo","_LifeCycleElementSemaphore","constructor","element","lifecycle","__publicField","destroyedBeforeInitialization","mountingInProgress","fn","lastResult","current","arguments","once","_releaseLock","_state","_element","_lifecycle","this","then","unmount","mountResult","value","catch","error","console","resolve","_value","_lock","unsafeSetValue","_afterMountCallbacks","forEach","callback","runAfterMount","push","_semaphores","prevElementSemaphore","get","Promise","releaseLock","deferred","promise","createDefer","newElementSemaphore","mount","async","afterMount","delete","set","Map","LifeCycleElementSemaphore","ReactContextMetadataKey","ContextWatchdogContext","isContextWatchdogValueWithStatus","status","obj","isContextWatchdogValue","isContextWatchdogInitializing","isContextWatchdogReadyToUse","watchdog","state","ReactIntegrationUsageDataPlugin","integrationName","usageData","frameworkVersion","editor","config","on","setUsageData","appendAllIntegrationPluginsToConfig","editorConfig","plugins","extraPlugins","filter","item","appendExtraPluginsToEditorConfig","REACT_INTEGRATION_READ_ONLY_LOCK_ID$1","CKEditor","super","_checkVersion","warn","startsWith","_semaphoreValue","editorSemaphore","instance","shouldComponentUpdate","nextProps","id","disableWatchdog","_shouldUpdateEditorData","data","disabled","enableReadOnlyMode","disableReadOnlyMode","componentDidMount","context","_initLifeCycleSemaphore","componentDidUpdate","componentWillUnmount","_unlockLifeCycleSemaphore","release","domContainer","_initializeEditor","onReady","onAfterDestroy","_destroyEditor","innerHTML","render","_createEditor","_getConfig","EditorWatchdogAdapter","EditorWatchdog","watchdogConfig","totalRestartsRef","setCreator","el","_a","setTimeout","causesRestart","onError","phase","willEditorRestart","create","contextItemMetadata","metadata","withCKEditorReactContextMetadata","modelDocument","model","document","viewDocument","editing","view","event","onChange","onFocus","onBlur","initializeResult","reject","destroy","e","prevProps","initialData","PropTypes","isRequired","contextWatchdog","_contextWatchdog","_id","r1","r2","r3","r4","crypto","getRandomValues","Uint32Array","uid","creator","_creator","sourceElementOrData","add","type","_2","itemId","remove","getItem","mergeRefs","_len","length","refs","_key","EditorEditable","memo","forwardRef","_ref13","semaphore","rootName","innerRef","useRef","useEffect","editable","_ref14","ui","getRoot","getEditableElement","detachEditable","createEditable","addEditable","forceRender","revision","key","displayName","EditorToolbarWrapper","_ref15","toolbarRef","toolbarContainer","toolbar","appendChild","contains","removeChild"],"sourceRoot":""}