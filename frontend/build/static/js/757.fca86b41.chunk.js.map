{"version":3,"file":"static/js/757.fca86b41.chunk.js","mappings":"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","sources":["components/News/Announcement/BoardTable.js","components/News/Announcement/BoardPagination.js","pages/News/Announcements/Announcements.js"],"sourcesContent":["import { Box, Card, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\r\n\r\nconst BoardTable = ({ announcements }) => {\r\n  function getText(html) {\r\n    let doc = new DOMParser().parseFromString(html, \"text/html\");\r\n    let allTextNodes = Array.from(doc.body.childNodes).filter(\r\n      (node) =>\r\n        node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE\r\n    );\r\n    return allTextNodes.map((node) => node.textContent.trim()).join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      {announcements.map((announcement, index) => (\r\n        <div key={announcement.id}>\r\n          <Card\r\n            component={Link}\r\n            to={announcement.id}\r\n            color=\"black\"\r\n            sx={{\r\n              display: \"flex\",\r\n              textDecoration: \"none\",\r\n              backgroundColor: announcement.pin ? \"lightgrey\" : null,\r\n              boxSizing: \"border-box\",\r\n              px: 2,\r\n              py: 0,\r\n              my: 1.8,\r\n            }}\r\n          >\r\n            <Stack\r\n              direction=\"column\"\r\n              alignItems=\"left\"\r\n              sx={{\r\n                justifyContent: \"center\",\r\n                width: \"45px\",\r\n              }}\r\n            >\r\n              <Typography variant=\"body2\" whiteSpace=\"nowrap\">\r\n                {format(new Date(announcement.timestamp), \"MMM dd\")}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {format(new Date(announcement.timestamp), \"yyyy\")}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            <Divider orientation=\"vertical\" flexItem sx={{ mx: 2 }} />\r\n\r\n            <Box\r\n              sx={{\r\n                p: 1,\r\n                flexGrow: 1,\r\n                overflow: \"hidden\",\r\n              }}\r\n            >\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                {announcement.pin ? (\r\n                  <PushPinIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n                ) : null}\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    display: \"block\",\r\n                    width: \"100%\",\r\n                    whiteSpace: \"nowrap\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                  }}\r\n                >\r\n                  {announcement.title}\r\n                </Typography>\r\n              </Stack>\r\n              <p\r\n                style={{\r\n                  fontSize: \"0.9em\",\r\n                  lineHeight: \"1.2em\",\r\n                  height: \"2.4em\",\r\n                  margin: 0,\r\n                  marginTop: 12,\r\n                  display: \"-webkit-box\",\r\n                  WebkitBoxOrient: \"vertical\",\r\n                  WebkitLineClamp: \"2\",\r\n                  width: \"100%\",\r\n                  wordBreak: \"break-all\",\r\n                  overflow: \"hidden\",\r\n                  textOverflow: \"ellipsis\",\r\n                }}\r\n              >\r\n                {getText(announcement.body)}\r\n              </p>\r\n            </Box>\r\n          </Card>\r\n          {index !== announcements.length - 1 && <Divider variant=\"middle\" />}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardTable;\r\n","import { Pagination } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst BoardPagination = ({ pages, currentPage }) => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Pagination\r\n      className=\"pagination\"\r\n      count={pages === 0 ? 1 : pages}\r\n      page={Number(currentPage)}\r\n      variant=\"outlined\"\r\n      color=\"primary\"\r\n      // hideNextButton={pages === 1}\r\n      // hidePrevButton={pages === numberOfAnnouncements}\r\n      sx={{\r\n        margin: \"auto\",\r\n        mt: 4,\r\n      }}\r\n      onChange={(_, pageNumber) => navigate(`?page=${pageNumber}`)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BoardPagination;\r\n","import {\r\n  Await,\r\n  useLoaderData,\r\n  useNavigation,\r\n  useRevalidator,\r\n  useSearchParams,\r\n} from \"react-router-dom\";\r\n\r\nimport { CircularProgress, Fab, Typography } from \"@mui/material\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport \"./Announcements.css\";\r\nimport AnnouncementPostModal from \"../../../components/News/Announcement/AnnouncementPostModal\";\r\nimport BoardTable from \"../../../components/News/Announcement/BoardTable\";\r\n\r\nimport \"../../NextGen/NextGen.css\";\r\nimport BoardPagination from \"../../../components/News/Announcement/BoardPagination\";\r\nimport useModals from \"../../../util/useModal\";\r\nimport AdminComponent from \"../../../common/AdminComponent\";\r\nimport { Suspense } from \"react\";\r\n\r\nconst titleBackground = {\r\n  backgroundImage:\r\n    'linear-gradient(rgba(0, 0, 0, 0.30), rgba(0, 0, 0, 0.30)),  url(\"/img/News/Announcements/Announcements.webp\")',\r\n};\r\n\r\nconst Announcements = () => {\r\n  let revalidator = useRevalidator();\r\n\r\n  const data = useLoaderData();\r\n  const { state } = useNavigation();\r\n  const [searchParams] = useSearchParams();\r\n  const page = searchParams.get(\"page\");\r\n\r\n  const { openModal } = useModals();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title-wrapper\" style={titleBackground}>\r\n        <div className=\"title\">\r\n          <Typography\r\n            variant=\"h4\"\r\n            fontWeight={830}\r\n            sx={{ letterSpacing: \"0.4em\", pl: \"0.4em\", color: \"white\" }}\r\n          >\r\n            공지사항\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container-wrapper\">\r\n        <div className=\"container\" style={{ maxWidth: \"1200px\" }}>\r\n          {state === \"loading\" && (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <CircularProgress />\r\n            </div>\r\n          )}\r\n\r\n          <Suspense\r\n            fallback={\r\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <CircularProgress />\r\n              </div>\r\n            }\r\n          >\r\n            <Await\r\n              resolve={data.announcementsData}\r\n              errorElement={<p>Error loading package location!</p>}\r\n            >\r\n              {({ data }) => {\r\n                return data.announcements.length === 0 ? (\r\n                  <Typography align=\"center\">\r\n                    게시물이 존재하지 않습니다.\r\n                  </Typography>\r\n                ) : (\r\n                  <>\r\n                    <BoardTable announcements={data.announcements} />\r\n                    <BoardPagination\r\n                      pages={Math.ceil(data.count / 10)}\r\n                      currentPage={page}\r\n                    />\r\n                  </>\r\n                );\r\n              }}\r\n            </Await>\r\n          </Suspense>\r\n        </div>\r\n      </div>\r\n\r\n      <AdminComponent>\r\n        <Fab\r\n          style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\r\n          onClick={() =>\r\n            openModal(AnnouncementPostModal, {\r\n              revalidator: revalidator.revalidate,\r\n              origTitle: \"\",\r\n              origBody: \"\",\r\n            })\r\n          }\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n      </AdminComponent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Announcements;\r\n"],"names":["_ref","announcements","getText","html","doc","DOMParser","parseFromString","Array","from","body","childNodes","filter","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","map","textContent","trim","join","_jsx","style","display","flexDirection","children","announcement","index","_jsxs","Card","component","Link","to","id","color","sx","textDecoration","backgroundColor","pin","boxSizing","px","py","my","Stack","direction","alignItems","justifyContent","width","Typography","variant","whiteSpace","format","Date","timestamp","Divider","orientation","flexItem","mx","Box","p","flexGrow","overflow","PushPinIcon","fontSize","mr","textOverflow","title","lineHeight","height","margin","marginTop","WebkitBoxOrient","WebkitLineClamp","wordBreak","length","pages","currentPage","navigate","useNavigate","Pagination","className","count","page","Number","mt","onChange","_","pageNumber","concat","titleBackground","backgroundImage","Announcements","revalidator","useRevalidator","data","useLoaderData","state","useNavigation","searchParams","useSearchParams","get","openModal","useModals","_Fragment","fontWeight","letterSpacing","pl","maxWidth","CircularProgress","Suspense","fallback","Await","resolve","announcementsData","errorElement","align","BoardTable","BoardPagination","Math","ceil","AdminComponent","Fab","position","right","bottom","onClick","AnnouncementPostModal","revalidate","origTitle","origBody","AddIcon"],"sourceRoot":""}