{"version":3,"file":"static/js/757.5345530c.chunk.js","mappings":"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","sources":["components/News/Announcement/BoardTable.js","components/News/Announcement/BoardPagination.js","pages/News/Announcements/Announcements.js"],"sourcesContent":["import { Box, Card, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\r\nimport MovieIcon from \"@mui/icons-material/Movie\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\n\r\nconst BoardTable = ({ announcements }) => {\r\n  function getText(html) {\r\n    let doc = new DOMParser().parseFromString(html, \"text/html\");\r\n    let allTextNodes = Array.from(doc.body.childNodes).filter(\r\n      (node) =>\r\n        node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE\r\n    );\r\n    return allTextNodes.map((node) => node.textContent.trim()).join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      {announcements.map((announcement, index) => (\r\n        <div key={announcement.id}>\r\n          <Card\r\n            component={Link}\r\n            to={announcement.id}\r\n            color=\"black\"\r\n            sx={{\r\n              display: \"flex\",\r\n              textDecoration: \"none\",\r\n              backgroundColor: announcement.pin ? \"lightgrey\" : null,\r\n              px: 2,\r\n              py: 0,\r\n              my: 1.8,\r\n            }}\r\n          >\r\n            <Stack\r\n              direction=\"column\"\r\n              sx={{\r\n                justifyContent: \"center\",\r\n                width: \"40px\",\r\n                minWidth: \"40px\",\r\n              }}\r\n            >\r\n              <Typography variant=\"body2\" whiteSpace=\"nowrap\">\r\n                {format(new Date(announcement.timestamp), \"MMM dd\")}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {format(new Date(announcement.timestamp), \"yyyy\")}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            <Divider orientation=\"vertical\" flexItem sx={{ mx: 2 }} />\r\n\r\n            <Box\r\n              sx={{\r\n                py: 1.5,\r\n                flexGrow: 1,\r\n                overflow: \"hidden\",\r\n              }}\r\n            >\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                {announcement.pin ? (\r\n                  <PushPinIcon fontSize=\"small\" sx={{ m: 0 }} />\r\n                ) : null}\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    whiteSpace: \"nowrap\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                  }}\r\n                >\r\n                  {announcement.title}\r\n                </Typography>\r\n              </Stack>\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                <p\r\n                  style={{\r\n                    fontSize: \"0.9em\",\r\n                    lineHeight: \"1.2em\",\r\n                    height: \"2.4em\",\r\n                    margin: 0,\r\n                    marginTop: 12,\r\n                    display: \"-webkit-box\",\r\n                    WebkitBoxOrient: \"vertical\",\r\n                    WebkitLineClamp: \"2\",\r\n                    width: \"100%\",\r\n                    wordBreak: \"break-all\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                  }}\r\n                >\r\n                  {getText(announcement.body)}\r\n                </p>\r\n                {announcement.images !== null ? <PhotoIcon /> : null}\r\n                {announcement.video ? <MovieIcon /> : null}\r\n              </Stack>\r\n            </Box>\r\n          </Card>\r\n          {index !== announcements.length - 1 && <Divider variant=\"middle\" />}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardTable;\r\n","import { Pagination } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst BoardPagination = ({ pages, currentPage }) => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Pagination\r\n      className=\"pagination\"\r\n      count={pages === 0 ? 1 : pages}\r\n      page={Number(currentPage)}\r\n      variant=\"outlined\"\r\n      color=\"primary\"\r\n      // hideNextButton={pages === 1}\r\n      // hidePrevButton={pages === numberOfAnnouncements}\r\n      sx={{\r\n        margin: \"auto\",\r\n        mt: 4,\r\n      }}\r\n      onChange={(_, pageNumber) => navigate(`?page=${pageNumber}`)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BoardPagination;\r\n","import {\r\n  Await,\r\n  useLoaderData,\r\n  useNavigation,\r\n  useRevalidator,\r\n  useSearchParams,\r\n} from \"react-router-dom\";\r\n\r\nimport { CircularProgress, Fab, Typography } from \"@mui/material\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport \"./Announcements.css\";\r\nimport AnnouncementPostModal from \"../../../components/News/Announcement/AnnouncementPostModal\";\r\nimport BoardTable from \"../../../components/News/Announcement/BoardTable\";\r\n\r\nimport \"../../NextGen/NextGen.css\";\r\nimport BoardPagination from \"../../../components/News/Announcement/BoardPagination\";\r\nimport useModals from \"../../../util/useModal\";\r\nimport AdminComponent from \"../../../common/AdminComponent\";\r\nimport { Suspense } from \"react\";\r\nimport FullScreenLoading from \"../../../common/FullScreenLoading\";\r\n\r\nconst titleBackground = {\r\n  backgroundImage:\r\n    'linear-gradient(rgba(0, 0, 0, 0.30), rgba(0, 0, 0, 0.30)),  url(\"/img/News/Announcements/Announcements.webp\")',\r\n};\r\n\r\nconst Announcements = () => {\r\n  let revalidator = useRevalidator();\r\n\r\n  const data = useLoaderData();\r\n  const { state } = useNavigation();\r\n  const [searchParams] = useSearchParams();\r\n  const page = searchParams.get(\"page\");\r\n\r\n  const { openModal } = useModals();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title-wrapper\" style={titleBackground}>\r\n        <div className=\"title\">\r\n          <Typography\r\n            variant=\"h4\"\r\n            fontWeight={830}\r\n            sx={{ letterSpacing: \"0.4em\", pl: \"0.4em\", color: \"white\" }}\r\n          >\r\n            공지사항\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container-wrapper\">\r\n        <div className=\"container\" style={{ maxWidth: \"1200px\" }}>\r\n          {state === \"loading\" && (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <FullScreenLoading />\r\n            </div>\r\n          )}\r\n\r\n          <Suspense\r\n            fallback={\r\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <CircularProgress />\r\n              </div>\r\n            }\r\n          >\r\n            <Await\r\n              resolve={data.announcementsData}\r\n              errorElement={<p>Error loading!</p>}\r\n            >\r\n              {({ data }) => {\r\n                return data.announcements.length === 0 ? (\r\n                  <Typography align=\"center\">\r\n                    게시물이 존재하지 않습니다.\r\n                  </Typography>\r\n                ) : (\r\n                  <>\r\n                    <BoardTable announcements={data.announcements} />\r\n                    <BoardPagination\r\n                      pages={Math.ceil(data.count / 10)}\r\n                      currentPage={page}\r\n                    />\r\n                  </>\r\n                );\r\n              }}\r\n            </Await>\r\n          </Suspense>\r\n        </div>\r\n      </div>\r\n\r\n      <AdminComponent>\r\n        <Fab\r\n          style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\r\n          onClick={() =>\r\n            openModal(AnnouncementPostModal, {\r\n              revalidator: revalidator.revalidate,\r\n              origTitle: \"\",\r\n              origBody: \"\",\r\n            })\r\n          }\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n      </AdminComponent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Announcements;\r\n"],"names":["_ref","announcements","getText","html","doc","DOMParser","parseFromString","Array","from","body","childNodes","filter","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","map","textContent","trim","join","_jsx","style","display","flexDirection","children","announcement","index","_jsxs","Card","component","Link","to","id","color","sx","textDecoration","backgroundColor","pin","px","py","my","Stack","direction","justifyContent","width","minWidth","Typography","variant","whiteSpace","format","Date","timestamp","Divider","orientation","flexItem","mx","Box","flexGrow","overflow","alignItems","PushPinIcon","fontSize","m","textOverflow","title","lineHeight","height","margin","marginTop","WebkitBoxOrient","WebkitLineClamp","wordBreak","images","PhotoIcon","video","MovieIcon","length","pages","currentPage","navigate","useNavigate","Pagination","className","count","page","Number","mt","onChange","_","pageNumber","concat","titleBackground","backgroundImage","Announcements","revalidator","useRevalidator","data","useLoaderData","state","useNavigation","searchParams","useSearchParams","get","openModal","useModals","_Fragment","fontWeight","letterSpacing","pl","maxWidth","FullScreenLoading","Suspense","fallback","CircularProgress","Await","resolve","announcementsData","errorElement","align","BoardTable","BoardPagination","Math","ceil","AdminComponent","Fab","position","right","bottom","onClick","AnnouncementPostModal","revalidate","origTitle","origBody","AddIcon"],"sourceRoot":""}