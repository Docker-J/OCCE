{"version":3,"file":"static/js/508.e7270c3a.chunk.js","mappings":"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","sources":["pages/Online/MeditationON/MeditationONComp.js","pages/Online/MeditationON/MeditationONModal.js","pages/Online/MeditationON/MeditationON.js"],"sourcesContent":["import { ImageList, ImageListItem } from \"@mui/material\";\r\nimport { memo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MeditationONComp = ({ posts }) => {\r\n  return posts.map((post) => (\r\n    <ImageListItem key={post.id} component={Link} to={post.id}>\r\n      <img\r\n        // src={`${\r\n        //   item.data().images[0]\r\n        // }?w=164&h=164&fit=crop&auto=format`}\r\n        src={post[\"0\"]}\r\n        // onClick={}\r\n        // srcSet={`${\r\n        //   item.data().images[0]\r\n        // }?w=164&h=164&fit=crop&auto=format&dpr=2 2x`}\r\n        alt=\"test\"\r\n        loading=\"lazy\"\r\n      />\r\n    </ImageListItem>\r\n  ));\r\n};\r\n\r\nexport const MemoizedMeditationONComp = memo(MeditationONComp);\r\n","import { Box, Button, IconButton, Modal } from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nconst MeditationONModal = ({ openModal, setOpenModal }) => {\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"80vw\",\r\n    height: \"80vh\",\r\n    maxWidth: \"1300px\",\r\n    bgcolor: \"#ffffff\",\r\n    // border: \"1pt solid #f57c00\",\r\n    boxShadow: 24,\r\n    borderRadius: \"0.5em\",\r\n    p: 1,\r\n    pt: 5,\r\n    pb: 5,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setFilesToUpload([]);\r\n    setImagesPreview([]);\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const [filesToUpload, setFilesToUpload] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n\r\n  const handleChangeFile = (file) => {\r\n    setFilesToUpload((prev) => [...prev, ...file]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setImagesPreview([]);\r\n    filesToUpload.forEach((image) => {\r\n      setImagesPreview((prev) => [...prev, URL.createObjectURL(image)]);\r\n    });\r\n  }, [filesToUpload]);\r\n\r\n  async function imgToBase64() {\r\n    // return new Promise((resolve) => {\r\n    //   const images = [];\r\n    //   for (let i = 0; i < filesToUpload.length; i++) {\r\n    //     fileToBase64(filesToUpload[i], (err, result) => {\r\n    //       images.push(result);\r\n    //       // if (i === filesToUpload.length - 1) {\r\n    //       // }\r\n    //     });\r\n    //   }\r\n    //   resolve(images);\r\n    // });\r\n\r\n    const promises = filesToUpload.map((file) => {\r\n      return new Promise((resolve) => {\r\n        fileToBase64(file, (err, result) => {\r\n          resolve(result);\r\n        });\r\n      });\r\n    });\r\n\r\n    const images = await Promise.all(promises);\r\n    return images;\r\n  }\r\n\r\n  const uploadFiles = () => {\r\n    imgToBase64().then((result) => {\r\n      post(result);\r\n    });\r\n  };\r\n\r\n  async function post(images) {\r\n    const data = {};\r\n\r\n    images.forEach((image, index) => {\r\n      data[index] = image;\r\n    });\r\n\r\n    console.log(data);\r\n\r\n    const test = await axios.post(\"/api/meditationON/uploadPost\", {\r\n      images: data,\r\n    });\r\n  }\r\n\r\n  const fileToBase64 = async (file, cb) => {\r\n    const compressedImage = await imageCompression(file, { maxSizeMB: 0.1 });\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(compressedImage);\r\n    reader.onload = function() {\r\n      cb(null, reader.result);\r\n    };\r\n    reader.onerror = function(error) {\r\n      cb(error, null);\r\n    };\r\n  };\r\n\r\n  const removeImage = (e) => {\r\n    const clickedItem = e.target.src;\r\n\r\n    let i;\r\n    for (i = 0; i < imagesPreview.length; i++) {\r\n      if (imagesPreview[i] === clickedItem) {\r\n        break;\r\n      }\r\n    }\r\n    URL.revokeObjectURL(imagesPreview[i]);\r\n    const newArray = [...filesToUpload]; // Make a copy of the original array\r\n    newArray.splice(i, 1); // Remove the element at the specified index\r\n    setFilesToUpload(newArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      imagesPreview.map((preview) => URL.revokeObjectURL(preview));\r\n    };\r\n  });\r\n\r\n  const { getRootProps, getInputProps, open } = useDropzone({\r\n    noClick: true,\r\n    accept: {\r\n      \"image/*\": [],\r\n    },\r\n    onDrop: (acceptedFiles) => {\r\n      handleChangeFile(acceptedFiles);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Modal\r\n      open={openModal}\r\n      onClose={handleClose}\r\n      // aria-labelledby=\"modal-modal-title\"\r\n      // aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style} bgcolor=\"white\">\r\n        <div\r\n          style={{\r\n            width: \"95%\",\r\n            height: \"90%\",\r\n            border: \"1pt dotted #f57c00\",\r\n            borderRadius: \"1em\",\r\n            overflowY: \"auto\",\r\n          }}\r\n          {...getRootProps()}\r\n        >\r\n          <input onChange={(e) => handleChangeFile(e)} {...getInputProps()} />\r\n          {filesToUpload.length === 0 ? (\r\n            \"Click or Drag Files\"\r\n          ) : (\r\n            <DndProvider backend={HTML5Backend}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  flexWrap: \"wrap\",\r\n                  margin: \"10pt\",\r\n                }}\r\n              >\r\n                {imagesPreview.map((image) => (\r\n                  <div\r\n                    style={{\r\n                      position: \"relative\",\r\n                      display: \"inline-flex\",\r\n                      borderRadius: 2,\r\n                      border: \"1px solid #eaeaea\",\r\n                      marginBottom: 8,\r\n                      marginRight: 8,\r\n                      width: \"18vw\",\r\n                      height: \"18vw\",\r\n                      padding: 4,\r\n                      boxSizing: \"border-box\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        minWidth: 0,\r\n                        overflow: \"hidden\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={image}\r\n                        alt=\"preview\"\r\n                        style={{\r\n                          display: \"block\",\r\n                          width: \"auto\",\r\n                          height: \"100%\",\r\n                        }}\r\n                        onClick={(e) => removeImage(e)}\r\n                      />\r\n                    </div>\r\n                    <IconButton\r\n                      style={{\r\n                        position: \"absolute\",\r\n                        display: \"block\",\r\n                        zIndex: 99,\r\n                        top: 0,\r\n                        right: 0,\r\n                      }}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </DndProvider>\r\n          )}\r\n        </div>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default MeditationONModal;\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { CircularProgress, Fab, ImageList, Typography } from \"@mui/material\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport axios from \"axios\";\r\nimport { MemoizedMeditationONComp } from \"./MeditationONComp\";\r\nimport MeditationONModal from \"./MeditationONModal\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nimport \"../../NextGen/NextGen.css\";\r\n\r\nconst PAGE_SIZE = 12;\r\nconst titleBackground = {\r\n  backgroundImage:\r\n    'linear-gradient(rgba(0, 0, 0, 0.45), rgba(0, 0, 0, 0.45)), url(\"/img/Online/MeditationON.webp\")',\r\n};\r\n\r\nconst MeditationON = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [end, setEnd] = useState(false);\r\n  const [restored, setRestored] = useState(true);\r\n\r\n  const getPosts = async () => {\r\n    console.log(\"test getPosts\");\r\n\r\n    const result = await axios.get(\r\n      `/api/MeditationON/getPosts${\r\n        posts.length === 0 ? \"\" : `?lastVisible=${posts.at(-1).id}`\r\n      }`\r\n    );\r\n    setPosts((prev) => [...prev, ...result.data]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (posts.length % PAGE_SIZE !== 0) {\r\n      setEnd(true);\r\n    }\r\n  }, [posts]);\r\n\r\n  const restore = () => {\r\n    setRestored(true);\r\n    console.log(\"test restore\");\r\n    setPosts(JSON.parse(sessionStorage.getItem(\"posts\")));\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.onpopstate = () => {\r\n      restore();\r\n    };\r\n    setRestored(false);\r\n    return () => {\r\n      window.onpopstate = () => {};\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!restored) {\r\n      getPosts();\r\n    }\r\n  }, [restored]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.setItem(\"posts\", JSON.stringify(posts));\r\n    };\r\n  });\r\n\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpenModal(true);\r\n  };\r\n  const scrollRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current && !end && posts.length >= 12) {\r\n      setTimeout(() => {\r\n        const contentHeight = scrollRef.current.clientHeight;\r\n        const screenHeight = window.innerHeight - 500;\r\n\r\n        console.log(\"test content\", contentHeight);\r\n        console.log(\"test screen\", screenHeight);\r\n\r\n        if (contentHeight > 100 && contentHeight < screenHeight) {\r\n          getPosts();\r\n        }\r\n      }, 500);\r\n    }\r\n\r\n    // re-run effect when items change\r\n  }, [posts]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\" style={titleBackground}>\r\n        <div className=\"titleContent\">\r\n          <Typography\r\n            variant=\"h4\"\r\n            fontWeight={830}\r\n            sx={{ letterSpacing: \"0.4em\", pl: \"0.4em\", color: \"white\" }}\r\n          >\r\n            묵상 ON\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          maxWidth: \"1500px\",\r\n          left: \"50%\",\r\n          transform: \"translateX(-50%)\",\r\n          marginTop: \"1em\",\r\n        }}\r\n      >\r\n        {posts.length !== 0 ? (\r\n          <InfiniteScroll\r\n            dataLength={posts.length}\r\n            next={getPosts}\r\n            hasMore={!end}\r\n            loader={<CircularProgress />}\r\n            scrollThreshold={0.75}\r\n            // scrollableTarget=\"scrollableDiv\"\r\n            style={{ overflowY: \"hidden\" }}\r\n          >\r\n            {\r\n              <ImageList\r\n                ref={scrollRef}\r\n                sx={{ mx: \"0.5rem\" }}\r\n                cols={3}\r\n                gap={2.5}\r\n              >\r\n                <MemoizedMeditationONComp posts={posts} />\r\n              </ImageList>\r\n            }\r\n          </InfiniteScroll>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </div>\r\n\r\n      <Fab\r\n        variant=\"primary\"\r\n        style={{ position: \"fixed\", right: \"2vw\", bottom: \"3vh\" }}\r\n        onClick={handleOpen}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      <MeditationONModal openModal={openModal} setOpenModal={setOpenModal} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MeditationON;\r\n"],"names":["MeditationONComp","_ref","posts","map","post","_jsx","ImageListItem","component","Link","to","id","children","src","alt","loading","MemoizedMeditationONComp","memo","openModal","setOpenModal","_useState","useState","_useState2","_slicedToArray","filesToUpload","setFilesToUpload","_useState3","_useState4","imagesPreview","setImagesPreview","handleChangeFile","file","prev","concat","_toConsumableArray","useEffect","forEach","image","URL","createObjectURL","preview","revokeObjectURL","_useDropzone","useDropzone","noClick","accept","onDrop","acceptedFiles","getRootProps","getInputProps","open","Modal","onClose","Box","sx","position","top","left","transform","width","height","maxWidth","bgcolor","boxShadow","borderRadius","p","pt","pb","display","flexDirection","alignItems","justifyContent","_jsxs","_objectSpread","style","border","overflowY","onChange","e","length","DndProvider","backend","HTML5Backend","flexWrap","margin","marginBottom","marginRight","padding","boxSizing","minWidth","overflow","onClick","i","clickedItem","target","newArray","splice","removeImage","IconButton","zIndex","right","DeleteIcon","titleBackground","backgroundImage","setPosts","end","setEnd","_useState5","_useState6","restored","setRestored","getPosts","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","next","console","log","axios","at","sent","data","stop","apply","arguments","window","onpopstate","JSON","parse","sessionStorage","getItem","setItem","stringify","_useState7","_useState8","scrollRef","useRef","current","setTimeout","contentHeight","clientHeight","screenHeight","innerHeight","_Fragment","className","Typography","variant","fontWeight","letterSpacing","pl","color","marginTop","InfiniteScroll","dataLength","hasMore","loader","CircularProgress","scrollThreshold","ImageList","ref","mx","cols","gap","Fab","bottom","AddIcon","MeditationONModal"],"sourceRoot":""}